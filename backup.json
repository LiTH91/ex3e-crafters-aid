{
  "README.md": "# Firebase Studio\n\nThis is a NextJS starter in Firebase Studio.\n\nTo get started, take a look at src/app/page.tsx.\n",
  "apphosting.yaml": "# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  maxInstances: 1\n",
  "backup.json": "{}",
  "components.json": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}",
  "create_backup.js": "\nconst fs = require('fs');\nconst path = require('path');\n\nconst FOLDER_TO_BACKUP = './src';\nconst OUTPUT_FILE = './backup.json';\nconst EXCLUDED_EXTENSIONS = ['.DS_Store', '.next', '.node_modules'];\nconst INCLUDED_EXTENSIONS = ['.ts', '.tsx', '.css', '.json', '.js', '.yaml', '.md'];\n\nconst backupData = {};\n\nfunction traverseDirectory(dir) {\n  const files = fs.readdirSync(dir);\n\n  for (const file of files) {\n    const fullPath = path.join(dir, file);\n    const stat = fs.statSync(fullPath);\n\n    if (stat.isDirectory()) {\n      if (!EXCLUDED_EXTENSIONS.some(ext => fullPath.includes(ext))) {\n        traverseDirectory(fullPath);\n      }\n    } else {\n      if (INCLUDED_EXTENSIONS.some(ext => fullPath.endsWith(ext))) {\n        const relativePath = path.relative(process.cwd(), fullPath);\n        console.log(`Backing up: ${relativePath}`);\n        backupData[relativePath] = fs.readFileSync(fullPath, 'utf8');\n      }\n    }\n  }\n}\n\n// Also include root-level config files\nconst rootFiles = fs.readdirSync('.');\nfor (const file of rootFiles) {\n    const fullPath = path.join('.', file);\n    const stat = fs.statSync(fullPath);\n    if (!stat.isDirectory() && INCLUDED_EXTENSIONS.some(ext => fullPath.endsWith(ext))) {\n         const relativePath = path.relative(process.cwd(), fullPath);\n         console.log(`Backing up: ${relativePath}`);\n         backupData[relativePath] = fs.readFileSync(fullPath, 'utf8');\n    }\n}\n\n\nconsole.log(`Starting backup of project structure...`);\ntraverseDirectory(FOLDER_TO_BACKUP);\n\nfs.writeFileSync(OUTPUT_FILE, JSON.stringify(backupData, null, 2));\n\nconsole.log(`\\nâœ… Backup complete! All code saved to ${OUTPUT_FILE}`);\nconsole.log('You can now open this file, copy its contents, and save it locally.');\n",
  "next.config.ts": "import type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n};\n\nexport default nextConfig;\n",
  "package.json": "{\n  \"name\": \"nextn\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@google/generative-ai\": \"^0.24.1\",\n    \"@hookform/resolvers\": \"^4.1.3\",\n    \"@radix-ui/react-accordion\": \"^1.2.3\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-avatar\": \"^1.1.3\",\n    \"@radix-ui/react-checkbox\": \"^1.1.4\",\n    \"@radix-ui/react-collapsible\": \"^1.1.11\",\n    \"@radix-ui/react-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.6\",\n    \"@radix-ui/react-label\": \"^2.1.2\",\n    \"@radix-ui/react-menubar\": \"^1.1.6\",\n    \"@radix-ui/react-popover\": \"^1.1.6\",\n    \"@radix-ui/react-progress\": \"^1.1.2\",\n    \"@radix-ui/react-radio-group\": \"^1.2.3\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.3\",\n    \"@radix-ui/react-select\": \"^2.1.6\",\n    \"@radix-ui/react-separator\": \"^1.1.2\",\n    \"@radix-ui/react-slider\": \"^1.2.3\",\n    \"@radix-ui/react-slot\": \"^1.2.3\",\n    \"@radix-ui/react-switch\": \"^1.1.3\",\n    \"@radix-ui/react-tabs\": \"^1.1.3\",\n    \"@radix-ui/react-toast\": \"^1.2.6\",\n    \"@radix-ui/react-tooltip\": \"^1.1.8\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"date-fns\": \"^3.6.0\",\n    \"embla-carousel-react\": \"^8.6.0\",\n    \"firebase\": \"^11.9.1\",\n    \"lucide-react\": \"^0.475.0\",\n    \"next\": \"15.3.3\",\n    \"patch-package\": \"^8.0.0\",\n    \"react\": \"^18.3.1\",\n    \"react-day-picker\": \"^8.10.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.54.2\",\n    \"recharts\": \"^2.15.1\",\n    \"tailwind-merge\": \"^3.0.1\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}\n",
  "tailwind.config.ts": "import type {Config} from 'tailwindcss';\n\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      fontFamily: {\n        body: ['Literata', 'serif'],\n        headline: ['Belleza', 'sans-serif'],\n        code: ['monospace'],\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n",
  "tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n",
  "src/ai/flows/evaluate-crafting-outcome.ts": "\n",
  "src/app/globals.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 45 56% 89%;\n    --foreground: 20 5% 20%;\n    --card: 45 56% 89%;\n    --card-foreground: 20 5% 20%;\n    --popover: 45 56% 89%;\n    --popover-foreground: 20 5% 20%;\n    --primary: 20 60% 50%;\n    --primary-foreground: 20 0% 100%;\n    --secondary: 45 30% 80%;\n    --secondary-foreground: 20 5% 20%;\n    --muted: 45 30% 80%;\n    --muted-foreground: 20 5% 40%;\n    --accent: 35 52% 64%;\n    --accent-foreground: 20 5% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 45 20% 75%;\n    --input: 45 20% 75%;\n    --ring: 20 60% 50%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n  }\n  .dark {\n    --background: 20 10% 10%;\n    --foreground: 45 20% 90%;\n    --card: 20 10% 10%;\n    --card-foreground: 45 20% 90%;\n    --popover: 20 10% 10%;\n    --popover-foreground: 45 20% 90%;\n    --primary: 20 60% 50%;\n    --primary-foreground: 20 0% 100%;\n    --secondary: 20 10% 20%;\n    --secondary-foreground: 45 20% 90%;\n    --muted: 20 10% 20%;\n    --muted-foreground: 45 20% 60%;\n    --accent: 35 52% 64%;\n    --accent-foreground: 20 5% 10%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 20 10% 30%;\n    --input: 20 10% 30%;\n    --ring: 20 60% 50%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
  "src/app/layout.tsx": "import type {Metadata} from 'next';\nimport './globals.css';\nimport { Toaster } from \"@/components/ui/toaster\"\n\nexport const metadata: Metadata = {\n  title: 'Exalted Crafter\\'s Aid',\n  description: 'An assistant for Exalted 3rd Edition crafting rolls.',\n  icons: {\n    icon: [],\n  },\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        <link href=\"https://fonts.googleapis.com/css2?family=Belleza&family=Literata:ital,opsz,wght@0,14..72,400;0,14..72,700;1,14..72,400;1,14..72,700&display=swap\" rel=\"stylesheet\" />\n      </head>\n      <body className=\"font-body antialiased\">\n        {children}\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n",
  "src/app/page.tsx": "\n\n\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport type { Character, DiceRoll, CraftingOutcome, ProjectType, ActiveProject, CraftingExperience } from \"@/lib/types\";\nimport { allCharms } from \"@/lib/charms\";\nimport { calculateCraftingOutcome } from \"@/lib/crafting-calculator\";\nimport { performDiceRoll } from \"@/lib/dice-logic\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport CharacterSheet from \"@/components/character-sheet\";\nimport CharmSelection from \"@/components/charm-selection\";\nimport DiceRoller from \"@/components/dice-roller\";\nimport CraftingJournal from \"@/components/crafting-journal\";\nimport CraftingReference from \"@/components/crafting-reference\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Hammer, Eye } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\n\n\nconst initialCharacter: Character = {\n  intelligence: 3,\n  wits: 1,\n  perception: 1,\n  strength: 1,\n  dexterity: 1,\n  stamina: 1,\n  charisma: 1,\n  manipulation: 1,\n  appearance: 1,\n  craft: 3,\n  essence: 1,\n  personalMotes: 10,\n  peripheralMotes: 25,\n  willpower: 5,\n  selectedAttribute: \"intelligence\",\n  knownCharms: allCharms.map((c) => c.id),\n};\n\nconst initialExperience: CraftingExperience = {\n  sxp: 0,\n  gxp: 0,\n  wxp: 0,\n}\n\nconst initialAppState = {\n    character: initialCharacter,\n    activeCharms: [],\n    craftingXp: initialExperience,\n    activeProjects: [],\n    isColorblindMode: false,\n    isTriumphForgingEyeActive: false,\n};\n\ninterface AppState {\n  character: Character;\n  activeCharms: string[];\n  craftingXp: CraftingExperience;\n  activeProjects: ActiveProject[];\n  isColorblindMode: boolean;\n  isTriumphForgingEyeActive: boolean;\n}\n\nexport default function Home() {\n  const [appState, setAppState] = useState<AppState>(initialAppState);\n  const [isMounted, setIsMounted] = useState(false); // To prevent hydration errors\n\n  const [diceRoll, setDiceRoll] = useState<DiceRoll | null>(null);\n  const [outcome, setOutcome] = useState<CraftingOutcome | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const [willpowerSpent, setWillpowerSpent] = useState(0);\n\n  // Load state from localStorage on client-side mount\n  useEffect(() => {\n    setIsMounted(true);\n    try {\n      const savedState = localStorage.getItem(\"exaltedCrafterState\");\n      if (savedState) {\n        const parsedState = JSON.parse(savedState);\n        // Ensure knownCharms is always up-to-date with the latest from allCharms\n        parsedState.character.knownCharms = allCharms.map(c => c.id);\n        if (parsedState.character && parsedState.activeProjects) {\n            setAppState(parsedState);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to load state from localStorage\", error);\n    }\n  }, []);\n\n  // Save state to localStorage whenever it changes\n  useEffect(() => {\n    // Only save state after the component has mounted and loaded initial state\n    if (isMounted) {\n        try {\n          const stateToSave = JSON.stringify(appState);\n          localStorage.setItem(\"exaltedCrafterState\", stateToSave);\n        } catch (error) {\n          console.error(\"Failed to save state to localStorage\", error);\n        }\n    }\n  }, [appState, isMounted]);\n\n  const handleStateChange = <K extends keyof AppState>(key: K, value: AppState[K] | ((prevState: AppState[K]) => AppState[K])) => {\n    setAppState(prev => {\n        const newValue = typeof value === 'function' ? (value as (prevState: AppState[K]) => AppState[K])(prev[key]) : value;\n        return { ...prev, [key]: newValue };\n    });\n  };\n\n  const handleExperienceChange = (updates: Partial<CraftingExperience>) => {\n    handleStateChange('craftingXp', prev => ({\n        sxp: prev.sxp + (updates.sxp || 0),\n        gxp: prev.gxp + (updates.gxp || 0),\n        wxp: prev.wxp + (updates.wxp || 0),\n    }));\n    toast({ title: \"Experience Updated\" });\n  }\n\n  const handleRoll = async (\n    projectDetails: {\n      type: ProjectType;\n      artifactRating: number;\n      objectivesMet: number;\n    },\n    excellencyDice: number,\n    assignedProjectId?: string\n  ) => {\n    setIsLoading(true);\n    setDiceRoll(null);\n    setOutcome(null);\n\n    try {\n      const { character, activeCharms, craftingXp, isTriumphForgingEyeActive } = appState;\n\n      // --- 1. Calculate Costs & Effects from Charms ---\n      let moteCost = isTriumphForgingEyeActive ? 0 : excellencyDice; // Excellency cost\n      let willpowerCost = willpowerSpent;\n      let sxpCost = 0;\n      let gxpCost = 0;\n      let wxpCost = 0;\n      let tnModifier = 0;\n      let currentTargetNumber = 5; // Default or get from state if managed here\n\n      const activeCharmDetails = allCharms.flatMap(charm => {\n          const charms = [];\n          if (activeCharms.includes(charm.id)) charms.push(charm);\n          if (charm.subEffects) {\n              charm.subEffects.forEach(subCharm => {\n                  if (activeCharms.includes(subCharm.id)) charms.push(subCharm);\n              });\n          }\n          return charms;\n      });\n\n      activeCharmDetails.forEach((charm) => {\n        if (charm.effect.type === \"lower_repair_difficulty\" && projectDetails.type.includes(\"repair\")) {\n            if(charm.effect.value) tnModifier -= charm.effect.value;\n        }\n\n        if (charm.id === 'experiential-conjuring-of-true-void') {\n            if(projectDetails.type.startsWith('major')) gxpCost += 4;\n            else if(projectDetails.type.startsWith('superior') || projectDetails.type.startsWith('legendary')) wxpCost += 4;\n            else if(projectDetails.type.startsWith('basic')) sxpCost += 4;\n        }\n\n        if (charm.cost) {\n            const moteMatch = charm.cost.match(/(\\d+)m/);\n            if (moteMatch) moteCost += parseInt(moteMatch[1], 10);\n            const willpowerMatch = charm.cost.match(/(\\d+)wp/);\n            if (willpowerMatch && charm.id !== 'will-forging-discipline') willpowerCost += parseInt(willpowerMatch[1], 10);\n            const sxpMatch = charm.cost.match(/(\\d+)sxp/);\n            if (sxpMatch) sxpCost += parseInt(sxpMatch[1], 10);\n            const gxpMatch = charm.cost.match(/(\\d+)gxp/);\n            if (gxpMatch) gxpCost += parseInt(gxpMatch[1], 10);\n            const wxpMatch = charm.cost.match(/(\\d+)wxp/);\n            if (wxpMatch) wxpCost += parseInt(wxpMatch[1], 10);\n        }\n      });\n      \n\n      // --- 2. Spend Costs ---\n      handleStateChange('character', prev => {\n        let personal = prev.personalMotes;\n        let peripheral = prev.peripheralMotes;\n        let remainingMoteCost = moteCost;\n        const personalToSpend = Math.min(personal, remainingMoteCost);\n        personal -= personalToSpend;\n        remainingMoteCost -= personalToSpend;\n        const peripheralToSpend = Math.min(peripheral, remainingMoteCost);\n        peripheral -= peripheralToSpend;\n        return { ...prev, personalMotes: personal, peripheralMotes: peripheral, willpower: prev.willpower - willpowerCost };\n      });\n\n      handleStateChange('craftingXp', prev => ({\n          sxp: prev.sxp - sxpCost,\n          gxp: prev.gxp - gxpCost,\n          wxp: prev.wxp - wxpCost,\n      }));\n\n      // --- 3. Perform the Dice Roll using the pure function ---\n      const finalTargetNumber = Math.max(1, currentTargetNumber + tnModifier);\n      const rollResult = await performDiceRoll({\n          character,\n          activeCharms,\n          targetNumber: finalTargetNumber,\n          willpowerSpent,\n          excellencyDice,\n          onProgress: (interimRoll) => {\n              setDiceRoll(interimRoll);\n          }\n      });\n\n      setDiceRoll(rollResult);\n\n      // --- 4. Calculate Final Outcome and Update State ---\n      const isExceptional = (projectDetails.type.startsWith(\"basic-\") || projectDetails.type.startsWith(\"major-\")) && rollResult.totalSuccesses >= finalTargetNumber + 3;\n\n      const result = calculateCraftingOutcome({ \n        project: projectDetails, \n        successes: rollResult.totalSuccesses, \n        targetNumber: finalTargetNumber, \n        isExceptional,\n        activeCharms, \n      });\n\n      if (result.isSuccess) {\n        handleStateChange('craftingXp', prev => ({\n          sxp: prev.sxp + result.experienceGained.sxp + rollResult.sxpFromCharm,\n          gxp: prev.gxp + result.experienceGained.gxp,\n          wxp: prev.wxp + result.experienceGained.wxp,\n        }));\n\n        if (assignedProjectId) {\n          handleStateChange('activeProjects', prevProjects => \n            prevProjects.map(p => {\n              if (p.id === assignedProjectId) {\n                const newProgress = p.progress + rollResult.totalSuccesses;\n                const isComplete = newProgress >= p.goal;\n                if(isComplete) {\n                    toast({ title: \"Project Complete!\", description: `You have completed \"${p.name}\".`});\n                }\n                return { ...p, progress: newProgress, isComplete };\n              }\n              return p;\n            })\n          );\n        }\n      }\n\n      setOutcome(result);\n\n    } catch (error) {\n      console.error(\"Error calculating crafting outcome:\", error);\n      toast({ variant: \"destructive\", title: \"Error\", description: \"Failed to calculate the crafting outcome. Please try again.\" });\n    } finally {\n      setIsLoading(false);\n      // Reset the Triumph-Forging Eye toggle after the roll is complete\n      if (appState.isTriumphForgingEyeActive) {\n          handleStateChange('isTriumphForgingEyeActive', false);\n      }\n    }\n  };\n\n  const resetState = () => {\n    if (window.confirm(\"Are you sure you want to reset all data? This cannot be undone.\")) {\n        localStorage.removeItem(\"exaltedCrafterState\");\n        setAppState(initialAppState);\n        setDiceRoll(null);\n        setOutcome(null);\n        toast({ title: \"Data Reset\", description: \"All character data and projects have been reset.\" });\n    }\n  }\n\n  const { character, activeCharms, craftingXp, activeProjects, isColorblindMode, isTriumphForgingEyeActive } = appState;\n  const hasTirelessWorkhorse = activeCharms.includes(\"tireless-workhorse-method\");\n  const majorProjectSlots = hasTirelessWorkhorse ? character.essence * 2 : 0;\n\n  const addProject = (project: Omit<ActiveProject, 'id' | 'isComplete'>) => {\n    handleStateChange('activeProjects', prev => [...prev, { ...project, id: crypto.randomUUID(), isComplete: false }]);\n  }\n\n  const removeProject = (projectId: string) => {\n    handleStateChange('activeProjects', prev => prev.filter(p => p.id !== projectId));\n  }\n  \n  if (!isMounted) {\n    // Render a loading state or null on the server and initial client render\n    // to prevent hydration mismatch. This can be a skeleton loader.\n    return null; \n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground p-4 sm:p-6 md:p-8\">\n      <main className=\"max-w-7xl mx-auto\">\n        <header className=\"text-center mb-8 md:mb-12\">\n          <div className=\"flex justify-center items-center gap-4 mb-2\">\n            <Hammer className=\"w-10 h-10 text-primary\" />\n            <h1 className=\"font-headline text-4xl sm:text-5xl md:text-6xl font-bold text-primary\">\n              Exalted Crafter's Aid\n            </h1>\n          </div>\n          <p className=\"font-body text-lg text-muted-foreground\">\n            Your assistant for epic crafting in the world of Exalted.\n          </p>\n        </header>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-1 flex flex-col gap-8\">\n            <CharacterSheet \n              character={character} \n              setCharacter={(value) => handleStateChange('character', value)} \n            />\n            <CharmSelection\n              knownCharms={character.knownCharms}\n              activeCharms={activeCharms}\n              setActiveCharms={(value) => handleStateChange('activeCharms', value)}\n              character={character}\n              experience={craftingXp}\n            />\n          </div>\n\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"roller\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"roller\">Dice Roller</TabsTrigger>\n                <TabsTrigger value=\"journal\">Crafting Journal</TabsTrigger>\n                <TabsTrigger value=\"reference\">Crafting Reference</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"roller\">\n                <DiceRoller\n                  character={character}\n                  activeCharms={activeCharms}\n                  onRoll={handleRoll}\n                  isLoading={isLoading}\n                  diceRoll={diceRoll}\n                  aiOutcome={outcome}\n                  activeProjects={activeProjects.filter(p => !p.isComplete)}\n                  willpowerSpent={willpowerSpent}\n                  setWillpowerSpent={setWillpowerSpent}\n                  isColorblindMode={isColorblindMode}\n                  isTriumphForgingEyeActive={isTriumphForgingEyeActive}\n                  setIsTriumphForgingEyeActive={(value) => handleStateChange('isTriumphForgingEyeActive', value)}\n                />\n              </TabsContent>\n              <TabsContent value=\"journal\">\n                <CraftingJournal\n                  experience={craftingXp}\n                  projects={activeProjects}\n                  maxProjects={majorProjectSlots}\n                  onAddProject={addProject}\n                  onRemoveProject={removeProject}\n                  onExperienceChange={handleExperienceChange}\n                />\n              </TabsContent>\n               <TabsContent value=\"reference\">\n                <CraftingReference />\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </main>\n      <footer className=\"text-center mt-12 text-sm text-muted-foreground\">\n         <div className=\"flex justify-center items-center gap-8 mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                  id=\"colorblind-mode\"\n                  checked={isColorblindMode}\n                  onCheckedChange={(value) => handleStateChange('isColorblindMode', value)}\n              />\n              <Label htmlFor=\"colorblind-mode\" className=\"flex items-center gap-2\">\n                  <Eye className=\"w-4 h-4\" />\n                  Colorblind Mode\n              </Label>\n            </div>\n            <Button variant=\"outline\" onClick={resetState}>Reset All Data</Button>\n         </div>\n        <p>\n          Exalted and its concepts are trademarks of Onyx Path Publishing. This\n          is an unofficial fan utility.\n        </p>\n      </footer>\n    </div>\n  );\n}\n",
  "src/components/character-sheet.tsx": "\"use client\";\n\nimport type { Character, Attribute } from \"@/lib/types\";\nimport { ATTRIBUTES } from \"@/lib/types\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { UserCircle, Sparkles, BrainCircuit, Droplets, HeartPulse, Hammer } from \"lucide-react\";\nimport { RatingControl } from \"@/components/ui/rating-control\";\n\ninterface CharacterSheetProps {\n  character: Character;\n  setCharacter: (value: (prev: Character) => Character) => void;\n}\n\nexport default function CharacterSheet({\n  character,\n  setCharacter,\n}: CharacterSheetProps) {\n  const handleStatChange = (stat: keyof Character, value: string | number) => {\n    const numValue = typeof value === 'string' ? parseInt(value, 10) : value;\n\n    if (!isNaN(numValue)) {\n        setCharacter(prev => ({ ...prev, [stat]: numValue }));\n    }\n  };\n\n  const handleAttributeChange = (value: string) => {\n    setCharacter(prev => ({ ...prev, selectedAttribute: value as Attribute }));\n  };\n\n  const handleRatingChange = (stat: keyof Character, value: number) => {\n    setCharacter(prev => ({ ...prev, [stat]: value }));\n  };\n\n  const statOptions = [1, 2, 3, 4, 5];\n  const essenceOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const willpowerOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\n  return (\n    <Card className=\"bg-card/80 backdrop-blur-sm border-2 border-primary/20 shadow-lg\">\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <UserCircle className=\"w-8 h-8 text-primary\" />\n          <div className=\"flex-grow\">\n            <CardTitle className=\"font-headline text-2xl text-primary\">\n              Character Stats\n            </CardTitle>\n            <CardDescription className=\"font-body\">\n              Set your crafter's core traits.\n            </CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-4\">\n            <div className=\"grid w-full items-center gap-2.5\">\n                <Label htmlFor=\"attribute\" className=\"font-bold text-lg font-body flex items-center gap-2\">\n                    <BrainCircuit className=\"w-5 h-5 text-blue-500\" />\n                    Primary Attribute\n                </Label>\n                <div className=\"flex gap-2\">\n                    <Select\n                    value={character.selectedAttribute}\n                    onValueChange={handleAttributeChange}\n                    >\n                    <SelectTrigger id=\"attribute\" className=\"bg-background\">\n                        <SelectValue placeholder=\"Select Attribute\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        {ATTRIBUTES.map((attr) => (\n                        <SelectItem key={attr} value={attr}>\n                            {attr.charAt(0).toUpperCase() + attr.slice(1)}\n                        </SelectItem>\n                        ))}\n                    </SelectContent>\n                    </Select>\n                    <RatingControl\n                        value={character[character.selectedAttribute]}\n                        max={5}\n                        onValueChange={(value) => handleRatingChange(character.selectedAttribute, value)}\n                    />\n                </div>\n            </div>\n            <div className=\"grid w-full items-center gap-2.5\">\n                <Label htmlFor=\"craft\" className=\"font-bold text-lg font-body flex items-center gap-2\">\n                    <Hammer className=\"w-5 h-5 text-orange-500\" />\n                    Craft Skill\n                </Label>\n                 <RatingControl\n                    value={character.craft}\n                    max={5}\n                    onValueChange={(value) => handleRatingChange(\"craft\", value)}\n                />\n            </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"grid w-full items-center gap-2.5\">\n                <Label htmlFor=\"essence\" className=\"font-bold text-lg font-body flex items-center gap-2\">\n                    <Sparkles className=\"w-5 h-5 text-yellow-500\" />\n                    Essence\n                </Label>\n                <Select\n                    value={character.essence.toString()}\n                    onValueChange={(value) => handleStatChange(\"essence\", value)}\n                >\n                    <SelectTrigger id=\"essence\" className=\"bg-background\">\n                    <SelectValue placeholder=\"Select Essence\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                    {essenceOptions.map((val) => (\n                        <SelectItem key={val} value={val.toString()}>\n                        {val}\n                        </SelectItem>\n                    ))}\n                    </SelectContent>\n                </Select>\n            </div>\n             <div className=\"grid w-full items-center gap-2.5\">\n                <Label htmlFor=\"willpower\" className=\"font-bold text-lg font-body flex items-center gap-2\">\n                    <HeartPulse className=\"w-5 h-5 text-red-500\" />\n                    Willpower\n                </Label>\n                <Select\n                    value={character.willpower.toString()}\n                    onValueChange={(value) => handleStatChange(\"willpower\", value)}\n                >\n                    <SelectTrigger id=\"willpower\" className=\"bg-background\">\n                    <SelectValue placeholder=\"Select Willpower\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                    {willpowerOptions.map((val) => (\n                        <SelectItem key={val} value={val.toString()}>\n                        {val}\n                        </SelectItem>\n                    ))}\n                    </SelectContent>\n                </Select>\n            </div>\n        </div>\n        <div>\n            <Label className=\"font-bold text-lg font-body flex items-center gap-2 mb-2.5\">\n                <Droplets className=\"w-5 h-5 text-cyan-500\" />\n                Motes\n            </Label>\n            <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid w-full items-center gap-1.5\">\n                    <Label htmlFor=\"personal-motes\" className=\"font-medium text-sm text-muted-foreground\">Personal</Label>\n                    <Input\n                        id=\"personal-motes\"\n                        type=\"number\"\n                        value={character.personalMotes}\n                        onChange={(e) => handleStatChange(\"personalMotes\", e.target.value)}\n                        className=\"bg-background\"\n                    />\n                </div>\n                <div className=\"grid w-full items-center gap-1.5\">\n                    <Label htmlFor=\"peripheral-motes\" className=\"font-medium text-sm text-muted-foreground\">Peripheral</Label>\n                    <Input\n                        id=\"peripheral-motes\"\n                        type=\"number\"\n                        value={character.peripheralMotes}\n                        onChange={(e) => handleStatChange(\"peripheralMotes\", e.target.value)}\n                        className=\"bg-background\"\n                    />\n                </div>\n            </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
  "src/components/charm-selection.tsx": "\n\"use client\";\n\nimport React, { useState, useMemo } from \"react\";\nimport type { Charm, Character, CraftingExperience } from \"@/lib/types\";\nimport { allCharms } from \"@/lib/charms\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ScrollText, Search } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface CharmSelectionProps {\n  knownCharms: string[];\n  activeCharms: string[];\n  setActiveCharms: (charms: string[]) => void;\n  character: Character;\n  experience: CraftingExperience;\n}\n\nconst CharmItem = ({ charm, activeCharms, handleCharmToggle, isDisabled }: { charm: Charm, activeCharms: string[], handleCharmToggle: (charmId: string, isSubCharm?: boolean) => void, isDisabled: boolean }) => (\n    <div\n        key={charm.id}\n        className={`flex items-start gap-3 p-3 rounded-md transition-colors ${isDisabled ? 'opacity-50' : 'hover:bg-secondary'}`}\n    >\n        <Checkbox\n        id={charm.id}\n        checked={activeCharms.includes(charm.id)}\n        onCheckedChange={() => handleCharmToggle(charm.id)}\n        className=\"mt-1\"\n        disabled={isDisabled}\n        />\n        <div className=\"grid gap-1.5 leading-none\">\n        <Label\n            htmlFor={charm.id}\n            className={`font-bold text-base font-body flex items-center gap-2 ${isDisabled ? '' : 'cursor-pointer'}`}\n        >\n            {charm.name}\n            {charm.cost && <Badge variant=\"secondary\">{charm.cost}</Badge>}\n        </Label>\n        <p className=\"text-sm text-muted-foreground font-body\">\n            {charm.description}\n        </p>\n        </div>\n    </div>\n);\n\n\nconst CharmSelection = React.memo(({\n  knownCharms,\n  activeCharms,\n  setActiveCharms,\n  character,\n  experience,\n}: CharmSelectionProps) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"name\");\n\n  const handleCharmToggle = (charmId: string) => {\n    let newActiveCharms = [...activeCharms];\n    const baseCharm = allCharms.find(c => c.id === charmId || c.subEffects?.some(sub => sub.id === charmId));\n    const isSubEffect = baseCharm && baseCharm.id !== charmId;\n\n    if (newActiveCharms.includes(charmId)) {\n        // --- DESELECTING ---\n        newActiveCharms = newActiveCharms.filter(id => id !== charmId);\n\n        // If deselecting a base charm, deselect all its sub-charms\n        if (baseCharm && !isSubEffect && baseCharm.subEffects) {\n            baseCharm.subEffects.forEach(sub => {\n                newActiveCharms = newActiveCharms.filter(id => id !== sub.id);\n            });\n        }\n        \n        // If deselecting a sub-charm, deselect higher-tier sub-charms of the same family\n        if (isSubEffect && baseCharm && baseCharm.subEffects) {\n            const subCharmIndex = baseCharm.subEffects.findIndex(s => s.id === charmId);\n            if (subCharmIndex !== -1) {\n                for (let i = subCharmIndex + 1; i < baseCharm.subEffects.length; i++) {\n                    const higherTierId = baseCharm.subEffects[i].id;\n                    newActiveCharms = newActiveCharms.filter(id => id !== higherTierId);\n                }\n            }\n        }\n        \n    } else {\n        // --- SELECTING ---\n        newActiveCharms.push(charmId);\n\n        // If selecting a sub-charm, also select its base charm and any lower-tier sub-charms\n        if (isSubEffect && baseCharm && baseCharm.subEffects) {\n            if (!newActiveCharms.includes(baseCharm.id)) {\n                newActiveCharms.push(baseCharm.id);\n            }\n            const subCharmIndex = baseCharm.subEffects.findIndex(s => s.id === charmId);\n            for (let i = 0; i < subCharmIndex; i++) {\n                const lowerTierId = baseCharm.subEffects[i].id;\n                if (!newActiveCharms.includes(lowerTierId)) {\n                    newActiveCharms.push(lowerTierId);\n                }\n            }\n        }\n    }\n    setActiveCharms(newActiveCharms);\n  };\n\n\n  const isCharmDisabled = (charm: Charm): boolean => {\n    // An active charm can always be deselected.\n    if (activeCharms.includes(charm.id)) {\n        return false;\n    }\n      \n    // Cost checks\n    const costSxp = charm.cost?.match(/(\\d+)sxp/);\n    const costGxp = charm.cost?.match(/(\\d+)gxp/);\n    const costWxp = charm.cost?.match(/(\\d+)wxp/);\n    if (costSxp && experience.sxp < parseInt(costSxp[1], 10)) return true;\n    if (costGxp && experience.gxp < parseInt(costGxp[1], 10)) return true;\n    if (costWxp && experience.wxp < parseInt(costWxp[1], 10)) return true;\n    \n    // Special rule for Ever-Ready Innovation Discipline\n    if (charm.id === 'ever-ready-innovation-discipline' && experience.sxp < 15) {\n        return true;\n    }\n\n    // Prerequisites check\n    if (charm.minCraft > character.craft) return true;\n    if (charm.minEssence > character.essence) return true;\n\n    return false;\n  }\n\n  const { functionalCharms, narrativeCharms } = useMemo(() => {\n    const charms = allCharms\n      .filter((charm) =>\n        charm.name.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n      .sort((a, b) => {\n        if (sortBy === \"essence\") {\n          if (a.minEssence !== b.minEssence) {\n            return a.minEssence - b.minEssence;\n          }\n          if (a.minCraft !== b.minCraft) {\n            return a.minCraft - b.minCraft;\n          }\n        }\n        return a.name.localeCompare(b.name);\n      });\n    \n    return {\n        functionalCharms: charms.filter(c => c.category === 'functional'),\n        narrativeCharms: charms.filter(c => c.category === 'narrative'),\n    }\n  }, [searchTerm, sortBy, character.craft, character.essence, experience]);\n  \n  const renderSubCharm = (baseCharm: Charm, subCharm: Charm) => {\n      const isDisabled = isCharmDisabled(baseCharm) || isCharmDisabled(subCharm);\n      return (\n        <div key={subCharm.id} className=\"flex items-start gap-3\">\n          <Checkbox \n            id={subCharm.id} \n            checked={activeCharms.includes(subCharm.id)} \n            onCheckedChange={() => handleCharmToggle(subCharm.id)} \n            className=\"mt-1\" \n            disabled={isDisabled}\n          />\n          <Label htmlFor={subCharm.id} className={`grid gap-1.5 leading-none ${isDisabled ? '' : 'cursor-pointer'}`}>\n              <span className=\"font-bold text-base font-body flex items-center gap-2\">{subCharm.name} {subCharm.cost && <Badge variant=\"secondary\">{subCharm.cost}</Badge>}</span>\n              <span className=\"text-sm text-muted-foreground font-body\">{subCharm.description}</span>\n          </Label>\n        </div>\n      )\n  }\n\n  return (\n    <Card className=\"bg-card/80 backdrop-blur-sm border-2 border-primary/20 shadow-lg\">\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <ScrollText className=\"w-8 h-8 text-primary\" />\n          <div className=\"flex-grow\">\n            <CardTitle className=\"font-headline text-2xl text-primary\">\n              Crafting Charms\n            </CardTitle>\n            <CardDescription className=\"font-body\">\n              Select Charms to enhance your roll.\n            </CardDescription>\n          </div>\n        </div>\n        <div className=\"flex gap-2 pt-4\">\n          <div className=\"relative flex-grow\">\n            <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search charms...\"\n              className=\"pl-8 w-full\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"w-[120px]\">\n              <SelectValue placeholder=\"Sort by\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"name\">Name</SelectItem>\n              <SelectItem value=\"essence\">Essence</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4 max-h-[600px] overflow-y-auto\">\n          {functionalCharms.length > 0 && (\n              <div className=\"space-y-2\">\n                  <h3 className=\"font-headline text-lg text-primary px-3\">Functional Charms</h3>\n                  <Separator />\n                  {functionalCharms.map((charm) => {\n                    const isDisabled = isCharmDisabled(charm);\n                    if (charm.subEffects) {\n                        return (\n                          <div key={charm.id} className={`p-3 rounded-md transition-colors ${isDisabled ? 'opacity-50' : ''}`}>\n                             <div className=\"flex items-start gap-3\">\n                                <Checkbox\n                                    id={charm.id}\n                                    checked={activeCharms.includes(charm.id)}\n                                    onCheckedChange={() => handleCharmToggle(charm.id)}\n                                    className=\"mt-1\"\n                                    disabled={isDisabled}\n                                />\n                                <div className=\"grid gap-1.5 leading-none\">\n                                    <Label htmlFor={charm.id} className={`font-bold text-base font-body ${isDisabled ? '' : 'cursor-pointer'}`}>\n                                      {charm.name} {charm.cost && <Badge variant=\"secondary\">{charm.cost}</Badge>}\n                                    </Label>\n                                    <p className=\"text-sm text-muted-foreground font-body\">\n                                        {charm.description}\n                                    </p>\n                                </div>\n                            </div>\n                            <div className=\"pl-8 mt-3 border-l-2 border-primary/50 space-y-3\">\n                               {charm.subEffects.map(subCharm => renderSubCharm(charm, subCharm))}\n                            </div>\n                          </div>\n                        )\n                    }\n                    return <CharmItem key={charm.id} charm={charm} activeCharms={activeCharms} handleCharmToggle={handleCharmToggle} isDisabled={isDisabled} />\n                  })}\n              </div>\n          )}\n\n          {narrativeCharms.length > 0 && (\n              <div className=\"space-y-2\">\n                  <h3 className=\"font-headline text-lg text-primary px-3 pt-4\">Narrative & Passive Charms</h3>\n                  <Separator />\n                  {narrativeCharms.map((charm) => (\n                      <CharmItem key={charm.id} charm={charm} activeCharms={activeCharms} handleCharmToggle={handleCharmToggle} isDisabled={isCharmDisabled(charm)} />\n                  ))}\n              </div>\n          )}\n\n          {functionalCharms.length === 0 && narrativeCharms.length === 0 && (\n            <p className=\"text-muted-foreground text-center font-body\">\n              No charms found.\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n});\nCharmSelection.displayName = \"CharmSelection\";\nexport default CharmSelection;\n",
  "src/components/crafting-journal.tsx": "\n\"use client\";\n\nimport { useState } from \"react\";\nimport type { ActiveProject, ProjectType, CraftingExperience } from \"@/lib/types\";\nimport { PROJECT_TYPES } from \"@/lib/types\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { BookOpen, Star, Sun, Moon, PlusCircle, Trash2, Minus, Plus } from \"lucide-react\";\n\n\ninterface CraftingJournalProps {\n  experience: CraftingExperience;\n  projects: ActiveProject[];\n  maxProjects: number;\n  onAddProject: (project: Omit<ActiveProject, \"id\" | \"isComplete\">) => void;\n  onRemoveProject: (projectId: string) => void;\n  onExperienceChange: (updates: Partial<CraftingExperience>) => void;\n}\n\nconst ExperienceAdjuster = ({ onAdjust }: { onAdjust: (amount: number) => void }) => {\n    const [amount, setAmount] = useState(1);\n\n    return (\n        <div className=\"flex items-center justify-center gap-2 mt-2\">\n            <Button variant=\"outline\" size=\"icon\" className=\"h-6 w-6\" onClick={() => onAdjust(-amount)}><Minus className=\"h-4 w-4\" /></Button>\n            <Input \n                type=\"number\" \n                className=\"h-8 w-16 text-center\" \n                value={amount} \n                onChange={e => setAmount(parseInt(e.target.value, 10) || 0)}\n                min={0}\n            />\n            <Button variant=\"outline\" size=\"icon\" className=\"h-6 w-6\" onClick={() => onAdjust(amount)}><Plus className=\"h-4 w-4\" /></Button>\n        </div>\n    )\n}\n\nexport default function CraftingJournal({\n  experience,\n  projects,\n  maxProjects,\n  onAddProject,\n  onRemoveProject,\n  onExperienceChange,\n}: CraftingJournalProps) {\n  const [newProjectName, setNewProjectName] = useState(\"\");\n  const [newProjectType, setNewProjectType] =\n    useState<ProjectType>(\"major-project\");\n  const [newProjectGoal, setNewProjectGoal] = useState(25);\n\n  const handleAddProject = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newProjectName || newProjectGoal <= 0) return;\n    onAddProject({\n      name: newProjectName,\n      type: newProjectType,\n      goal: newProjectGoal,\n      progress: 0,\n    });\n    setNewProjectName(\"\");\n    setNewProjectType(\"major-project\");\n    setNewProjectGoal(25);\n  };\n  \n  const canAddProject = projects.filter(p => p.type.startsWith(\"major\")).length < maxProjects;\n\n  return (\n    <Card className=\"bg-card/80 backdrop-blur-sm border-2 border-primary/20 shadow-lg\">\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <BookOpen className=\"w-8 h-8 text-primary\" />\n          <div className=\"flex-grow\">\n            <CardTitle className=\"font-headline text-2xl text-primary\">\n              Crafting Journal\n            </CardTitle>\n            <CardDescription className=\"font-body\">\n              Track your experience and ongoing projects.\n            </CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Experience Section */}\n        <div>\n          <h3 className=\"font-headline text-xl text-primary mb-2\">\n            Crafting Experience\n          </h3>\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div className=\"p-4 bg-background rounded-lg shadow\">\n              <div className=\"flex items-center justify-center gap-2\">\n                <Moon className=\"w-6 h-6 text-gray-400\" />\n                <p className=\"font-bold text-2xl font-headline text-foreground\">\n                  {experience.sxp}\n                </p>\n              </div>\n              <p className=\"text-sm text-muted-foreground font-body\">\n                Silver (SXP)\n              </p>\n              <ExperienceAdjuster onAdjust={(amount) => onExperienceChange({ sxp: amount })} />\n            </div>\n            <div className=\"p-4 bg-background rounded-lg shadow\">\n              <div className=\"flex items-center justify-center gap-2\">\n                <Sun className=\"w-6 h-6 text-yellow-500\" />\n                <p className=\"font-bold text-2xl font-headline text-foreground\">\n                  {experience.gxp}\n                </p>\n              </div>\n              <p className=\"text-sm text-muted-foreground font-body\">\n                Gold (GXP)\n              </p>\n               <ExperienceAdjuster onAdjust={(amount) => onExperienceChange({ gxp: amount })} />\n            </div>\n            <div className=\"p-4 bg-background rounded-lg shadow\">\n              <div className=\"flex items-center justify-center gap-2\">\n                <Star className=\"w-6 h-6 text-white\" />\n                <p className=\"font-bold text-2xl font-headline text-foreground\">\n                  {experience.wxp}\n                </p>\n              </div>\n              <p className=\"text-sm text-muted-foreground font-body\">\n                White (WXP)\n              </p>\n               <ExperienceAdjuster onAdjust={(amount) => onExperienceChange({ wxp: amount })} />\n            </div>\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Projects Section */}\n        <div>\n          <div className=\"flex justify-between items-baseline mb-4\">\n            <h3 className=\"font-headline text-xl text-primary\">\n              Active Projects\n            </h3>\n            {maxProjects > 0 && (\n              <span className=\"text-sm text-muted-foreground font-body\">\n                {projects.filter(p => p.type.startsWith(\"major\")).length} / {maxProjects} major project slots used\n              </span>\n            )}\n          </div>\n          {/* Add Project Form */}\n          <form\n            onSubmit={handleAddProject}\n            className=\"p-4 bg-secondary/50 rounded-lg mb-4 space-y-4\"\n          >\n            <h4 className=\"font-headline text-lg\">Start New Project</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"project-name\">Project Name</Label>\n                    <Input\n                        id=\"project-name\"\n                        value={newProjectName}\n                        onChange={(e) => setNewProjectName(e.target.value)}\n                        placeholder=\"e.g., Orichalcum Daiklave\"\n                        required\n                    />\n                </div>\n                 <div>\n                    <Label htmlFor=\"project-goal\">Crafting Goal</Label>\n                    <Input\n                        id=\"project-goal\"\n                        type=\"number\"\n                        value={newProjectGoal}\n                        onChange={(e) => setNewProjectGoal(parseInt(e.target.value, 10))}\n                        min={1}\n                        required\n                    />\n                </div>\n            </div>\n             <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-end\">\n                <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"project-type\">Project Type</Label>\n                     <Select\n                        value={newProjectType}\n                        onValueChange={(v) => setNewProjectType(v as ProjectType)}\n                    >\n                        <SelectTrigger id=\"project-type\">\n                            <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                            {PROJECT_TYPES.filter(t => t.endsWith(\"project\")).map((type) => (\n                            <SelectItem key={type} value={type}>\n                                {type.replace(\"-\", \" \").replace(/\\b\\w/g, l => l.toUpperCase())}\n                            </SelectItem>\n                            ))}\n                        </SelectContent>\n                    </Select>\n                </div>\n                <Button type=\"submit\" disabled={!canAddProject || !newProjectName} className=\"w-full\">\n                    <PlusCircle className=\"mr-2 h-4 w-4\" /> Add Project\n                </Button>\n            </div>\n             {!canAddProject && newProjectType.startsWith(\"major\") && (\n                <p className=\"text-sm text-destructive font-body text-center\">\n                    No major project slots available. Activate Tireless Workhorse Method or free up a slot.\n                </p>\n            )}\n\n          </form>\n\n          {/* Project List */}\n          {projects.length > 0 ? (\n            <div className=\"space-y-4\">\n              {projects.map((p) => (\n                <Card key={p.id} className={`p-4 ${p.isComplete ? 'bg-green-900/20' : 'bg-secondary'}`}>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <p className=\"font-bold font-body\">{p.name}</p>\n                      <p className=\"text-sm text-muted-foreground font-body\">\n                        {p.type.replace(\"-\", \" \").replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </p>\n                    </div>\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => onRemoveProject(p.id)}>\n                        <Trash2 className=\"h-4 w-4 text-destructive\"/>\n                    </Button>\n                  </div>\n                  <div className=\"mt-2\">\n                    <div className=\"flex justify-between text-sm font-body mb-1\">\n                        <span>Progress</span>\n                        <span>{p.progress} / {p.goal}</span>\n                    </div>\n                    <Progress value={(p.progress / p.goal) * 100} />\n                  </div>\n                  {p.isComplete && (\n                      <p className=\"text-center font-bold text-green-400 mt-2 font-headline\">COMPLETE</p>\n                  )}\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center text-muted-foreground font-body p-4 border-2 border-dashed border-border rounded-lg\">\n              <p>No active projects.</p>\n              {maxProjects > 0 ? (\n                 <p className=\"text-sm\">\n                    You have {maxProjects} available major project slots.\n                 </p>\n              ) : (\n                <p className=\"text-sm\">\n                    Activate Tireless Workhorse Method to gain project slots.\n                </p>\n              )}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
  "src/components/crafting-reference.tsx": "\"use client\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Library } from \"lucide-react\";\n\nconst xpReferenceData = [\n    { category: \"Basic Project\", objectives: \"1-3\", standard: \"2 SXP per objective\", exceptional: \"3 SXP per objective\" },\n    { category: \"Basic Repair\", objectives: \"1-3\", standard: \"1 SXP per objective\", exceptional: \"N/A\" },\n    { category: \"Major Project\", objectives: \"1-3\", standard: \"2 GXP & 1 SXP per objective\", exceptional: \"3 GXP & 1 SXP per objective\" },\n    { category: \"Major Repair\", objectives: \"1-3\", standard: \"1 GXP per objective\", exceptional: \"N/A\" },\n    { category: \"Superior Project\", objectives: \"1 (Finishing)\", standard: \"WXP based on Artifact Rating*\", exceptional: \"N/A\" },\n    { category: \"Superior Repair\", objectives: \"1 (Finishing)\", standard: \"WXP = (Rating - 1)\", exceptional: \"N/A\" },\n    { category: \"Legendary Project\", objectives: \"1 (Finishing)\", standard: \"10 WXP\", exceptional: \"N/A\" },\n    { category: \"Legendary Repair\", objectives: \"N/A\", standard: \"No XP\", exceptional: \"N/A\" },\n];\n\nconst superiorWxpMap = \"2-Dot: 3 WXP, 3-Dot: 5 WXP, 4-Dot: 7 WXP, 5-Dot: 9 WXP\";\n\nexport default function CraftingReference() {\n  return (\n    <Card className=\"bg-card/80 backdrop-blur-sm border-2 border-primary/20 shadow-lg\">\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <Library className=\"w-8 h-8 text-primary\" />\n          <div className=\"flex-grow\">\n            <CardTitle className=\"font-headline text-2xl text-primary\">\n              Crafting Reference\n            </CardTitle>\n            <CardDescription className=\"font-body\">\n              A quick reference for Experience Point (XP) rewards from crafting projects.\n            </CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"font-bold font-headline\">Project Category</TableHead>\n              <TableHead className=\"font-bold font-headline\">Objectives</TableHead>\n              <TableHead className=\"font-bold font-headline\">Standard Reward</TableHead>\n              <TableHead className=\"font-bold font-headline\">Exceptional Reward</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {xpReferenceData.map((row) => (\n              <TableRow key={row.category}>\n                <TableCell className=\"font-medium font-body\">{row.category}</TableCell>\n                <TableCell className=\"font-body\">{row.objectives}</TableCell>\n                <TableCell className=\"font-body\">{row.standard}</TableCell>\n                <TableCell className=\"font-body\">{row.exceptional}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <div className=\"mt-4 p-3 bg-secondary/50 rounded-lg\">\n            <p className=\"text-sm font-body text-muted-foreground\"><span className=\"font-bold text-foreground\">*Superior Project WXP Rewards:</span> {superiorWxpMap}</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
  "src/components/dice-roller.tsx": "\n\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport type { DiceRoll, CraftingOutcome, Character, ProjectType, ActiveProject, Charm, DieResult } from \"@/lib/types\";\nimport { PROJECT_TYPES } from \"@/lib/types\";\nimport { allCharms } from \"@/lib/charms\";\nimport { shouldDieExplode, calculateSuccesses } from \"@/lib/dice-logic\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dices,\n  CheckCircle2,\n  XCircle,\n  Loader2,\n  Sparkles,\n  Hammer,\n  Book,\n  Gem,\n  Star,\n  Sun,\n  Flame,\n  Replace,\n  Moon,\n  PlusCircle,\n  Eye,\n  Info,\n  Brain,\n} from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\n\n\ninterface DiceRollerProps {\n  character: Character;\n  activeCharms: string[];\n  onRoll: (\n    projectDetails: {\n      type: ProjectType;\n      artifactRating: number;\n      objectivesMet: number;\n    },\n    excellencyDice: number,\n    assignedProjectId?: string\n  ) => void;\n  isLoading: boolean;\n  diceRoll: DiceRoll | null;\n  aiOutcome: CraftingOutcome | null;\n  activeProjects: ActiveProject[];\n  willpowerSpent: number;\n  setWillpowerSpent: (value: number) => void;\n  isColorblindMode: boolean;\n  isTriumphForgingEyeActive: boolean;\n  setIsTriumphForgingEyeActive: (value: boolean) => void;\n}\n\nconst getDieStyle = (die: DieResult, isColorblindMode: boolean, activeCharms: string[]): { style: string } => {\n  if (die.modification === 'reroll') {\n    return { style: \"bg-gray-700 text-white border-gray-900 opacity-50 line-through\" };\n  }\n   if (die.modification === 'fmd_source') {\n    return { style: \"bg-purple-300 text-black border-purple-500\" };\n  }\n\n  // A die is a special success if it counts as 2 successes.\n  const isSpecialSuccess = calculateSuccesses(die.value, activeCharms) === 2;\n\n  if (isColorblindMode) {\n      if (die.value === 1) return { style: \"bg-rose-700 text-white border-rose-900\" }; // Vermillion for 1\n      if (isSpecialSuccess) return { style: \"bg-orange-500 text-white border-orange-700\" };\n      if (die.value >= 7) return { style: \"bg-sky-500 text-white border-sky-700\" };\n      return { style: \"bg-black text-white border-gray-600\" };\n  }\n\n  // Default color mode\n  if (die.value === 1) return { style: \"bg-red-500 text-white border-red-700\" };\n  if (isSpecialSuccess) return { style: \"bg-yellow-400 text-black border-yellow-600\" };\n  if (die.value >= 7) return { style: \"bg-green-500 text-white border-green-700\" };\n  return { style: \"bg-gray-400 text-black border-gray-600\" };\n};\n\nconst DiceDisplay = ({ diceRoll, isColorblindMode }: { diceRoll: DiceRoll, isColorblindMode: boolean }) => (\n    <TooltipProvider>\n    <div className=\"flex flex-col items-center justify-center gap-4 p-4 bg-secondary/30 rounded-lg\">\n        {diceRoll.diceHistories.map((wave, waveIndex) => (\n           <React.Fragment key={`wave-fragment-${waveIndex}`}>\n                {waveIndex > 0 && wave.some(d => d.modificationSource === 'Divine Inspiration Technique') && (\n                    <Separator className=\"my-2 bg-primary/20 w-1/2\" />\n                )}\n                <div className=\"flex items-center gap-2 flex-wrap justify-center\">\n                    {wave.map((die, rollIndex) => {\n                       if (!die) return null;\n                       const { style } = getDieStyle(die, isColorblindMode, diceRoll.activeCharmIds);\n                       const valueToShow = die.modification === 'reroll' ? die.initialValue : die.value;\n                       const isExplosionTrigger = shouldDieExplode(die, diceRoll.activeCharmIds);\n                       \n                       return (\n                           <div key={`wave-${waveIndex}-roll-${rollIndex}`} className=\"relative\">\n                               <div className={`relative flex items-center justify-center w-10 h-10 border-2 rounded-md ${style}`}>\n                                   <span className=\"text-lg font-bold\">{valueToShow}</span>\n                               </div>\n                               {die.fmdId && (\n                                   <sup className=\"absolute -top-1 -left-1 bg-purple-500 text-white rounded-full h-4 w-4 text-xs flex items-center justify-center\">\n                                       {die.fmdId}\n                                   </sup>\n                               )}\n                                {(die.modification && die.modification !== 'fmd_source') || die.modificationSource === 'Divine Inspiration Technique' || isExplosionTrigger ? (\n                                   <Tooltip>\n                                       <TooltipTrigger asChild>\n                                            <span className=\"absolute -top-2 -right-2 bg-primary text-primary-foreground rounded-full p-0.5\">\n                                                {isExplosionTrigger && <Flame className=\"w-3 h-3\" />}\n                                                {die.modification === 'explosion' && <Flame className=\"w-3 h-3\" />}\n                                                {die.modification === 'conversion' && <Replace className=\"w-3 h-3\" />}\n                                                {die.modification === 'reroll' && <div className=\"w-3 h-3\" />}\n                                                {die.modificationSource === 'Divine Inspiration Technique' && <Eye className=\"w-3 h-3\" />}\n                                            </span>\n                                       </TooltipTrigger>\n                                       <TooltipContent>\n                                           <p>\n                                               {isExplosionTrigger && `Explodes!`}\n                                               {die.modification === 'explosion' && `Exploded from a ${die.initialValue}`}\n                                               {die.modification === 'conversion' && `Converted to a 10 from a ${die.initialValue} (FMD #${die.fmdId})`}\n                                               {die.modification === 'reroll' && `Rerolled a ${die.initialValue}`}\n                                               {die.modificationSource && ` due to ${die.modificationSource}`}\n                                           </p>\n                                       </TooltipContent>\n                                   </Tooltip>\n                               ) : null}\n                           </div>\n                       )\n                    })}\n                </div>\n           </React.Fragment>\n        ))}\n    </div>\n    </TooltipProvider>\n);\n\nconst calculateCharmCost = (activeCharmIds: string[], allCharms: Charm[], projectType: ProjectType, excellencyDice: number, isTriumphForgingEyeActive: boolean) => {\n  let motes = isTriumphForgingEyeActive ? 0 : excellencyDice;\n  let willpower = 0;\n  let sxp = 0;\n  let gxp = 0;\n  let wxp = 0;\n\n  for (const id of activeCharmIds) {\n    let charmToCost: Partial<Charm> | undefined;\n\n    for (const charm of allCharms) {\n      if (charm.id === id) {\n        charmToCost = charm;\n        break;\n      }\n      if (charm.subEffects) {\n        const subEffect = charm.subEffects.find(se => se.id === id);\n        if (subEffect) {\n          charmToCost = { ...subEffect, name: `${charm.name}: ${subEffect.name}` };\n          break;\n        }\n      }\n    }\n\n    if (!charmToCost || !charmToCost.cost || charmToCost.cost === 'â€”') {\n      continue;\n    }\n    \n    if (charmToCost.id === 'experiential-conjuring-of-true-void') {\n        if (projectType.startsWith('major')) {\n            gxp += 4;\n        } else if (projectType.startsWith('superior') || projectType.startsWith('legendary')) {\n            wxp += 4;\n        } else if (projectType.startsWith('basic')) {\n            sxp += 4;\n        }\n    }\n\n    const costParts = charmToCost.cost.split(',').map(s => s.trim());\n\n    for (const part of costParts) {\n      if (part.endsWith('m')) {\n        motes += parseInt(part, 10) || 0;\n      } else if (part.endsWith('wp') && charmToCost.id !== 'will-forging-discipline') {\n        willpower += parseInt(part, 10) || 0;\n      } else if (part.endsWith('gxp')) {\n        gxp += parseInt(part, 10) || 0;\n      } else if (part.endsWith('wxp')) {\n        wxp += parseInt(part, 10) || 0;\n      } else if (part.endsWith('sxp')) {\n        sxp += parseInt(part, 10) || 0;\n      }\n    }\n  }\n\n  return { motes, willpower, sxp, gxp, wxp };\n};\n\n\nexport default function DiceRoller({\n  character,\n  activeCharms,\n  onRoll,\n  isLoading,\n  diceRoll,\n  aiOutcome,\n  activeProjects,\n  willpowerSpent,\n  setWillpowerSpent,\n  isColorblindMode,\n  isTriumphForgingEyeActive,\n  setIsTriumphForgingEyeActive,\n}: DiceRollerProps) {\n  const [projectType, setProjectType] = useState<ProjectType>(\"major-project\");\n  const [targetNumber, setTargetNumber] = useState(5);\n  const [artifactRating, setArtifactRating] = useState(2);\n  const [objectivesMet, setObjectivesMet] = useState(1);\n  const [assignedProjectId, setAssignedProjectId] = useState<string | undefined>(undefined);\n  const [excellencyDice, setExcellencyDice] = useState(0);\n\n  const isBrassScalesFallingActive = activeCharms.includes('brass-scales-falling');\n  const canUseTriumphForgingEye = activeCharms.includes('triumph-forging-eye');\n  \n  useEffect(() => {\n    if (isBrassScalesFallingActive || isTriumphForgingEyeActive) {\n      setExcellencyDice(0);\n    }\n    if (isTriumphForgingEyeActive) {\n      setExcellencyDice(character[character.selectedAttribute] + character.craft);\n    } else {\n        // If the charm is deselected, reset excellency unless another charm is controlling it\n        if (!isBrassScalesFallingActive) {\n             setExcellencyDice(0);\n        }\n    }\n  }, [isBrassScalesFallingActive, isTriumphForgingEyeActive, character.selectedAttribute, character.craft]);\n\n  const handleRollClick = () => {\n    onRoll({ \n      type: projectType,\n      artifactRating: projectType.startsWith(\"superior-\") ? artifactRating : 0,\n      objectivesMet, \n    }, currentExcellencyDice, assignedProjectId);\n  };\n\n  const baseDicePool = character[character.selectedAttribute] + character.craft;\n  const maxExcellencyDice = baseDicePool;\n  \n  const currentExcellencyDice = isTriumphForgingEyeActive ? maxExcellencyDice : (isBrassScalesFallingActive ? 0 : excellencyDice);\n  \n  const totalDicePool = baseDicePool + currentExcellencyDice;\n\n  const charmCosts = calculateCharmCost(activeCharms, allCharms, projectType, currentExcellencyDice, isTriumphForgingEyeActive);\n  const isWillForgingActive = activeCharms.includes(\"will-forging-discipline\");\n  const totalWillpowerCost = charmCosts.willpower + (isWillForgingActive ? willpowerSpent : 0);\n\n  const hasCosts = Object.values(charmCosts).some(cost => cost > 0) || (isWillForgingActive && willpowerSpent > 0);\n\n\n  const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\n  const formatProjectTypeName = (type: ProjectType) => {\n    return type.split(\"-\").map(capitalize).join(\" \");\n  };\n  \n  const activeNarrativeCharms = allCharms.filter(\n    (charm) =>\n      diceRoll?.activeCharmIds.includes(charm.id) && charm.category === 'narrative'\n  );\n  \n  const successSources = [];\n  if (diceRoll) {\n      if (diceRoll.excellencyDice > 0) {\n          successSources.push(`${diceRoll.excellencyDice} from Excellency`);\n      }\n      if (diceRoll.automaticSuccesses > 0) {\n          successSources.push(`${diceRoll.automaticSuccesses} from Charms`);\n      }\n  }\n\n\n  return (\n    <Card className=\"bg-card/80 backdrop-blur-sm border-2 border-primary/20 shadow-lg\">\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <Hammer className=\"w-8 h-8 text-primary\" />\n          <div className=\"flex-grow\">\n            <CardTitle className=\"font-headline text-2xl text-primary\">\n              Crafting Roll\n            </CardTitle>\n            <CardDescription className=\"font-body\">\n              Configure and execute your crafting action.\n            </CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 items-end\">\n          <div>\n            <Label htmlFor=\"project-type\" className=\"font-bold\">\n              Project Type\n            </Label>\n            <Select value={projectType} onValueChange={(v) => setProjectType(v as ProjectType)}>\n              <SelectTrigger id=\"project-type\"><SelectValue placeholder=\"Select type\" /></SelectTrigger>\n              <SelectContent>\n                {PROJECT_TYPES.map((type) => (\n                   <SelectItem key={type} value={type}>{formatProjectTypeName(type)}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          {projectType.startsWith(\"superior-\") && (\n            <div>\n              <Label htmlFor=\"artifact-rating\" className=\"font-bold\">Artifact Rating</Label>\n              <Input id=\"artifact-rating\" type=\"number\" value={artifactRating} onChange={(e) => setArtifactRating(parseInt(e.target.value, 10))} min={2} max={5}/>\n            </div>\n          )}\n          <div>\n            <Label htmlFor=\"objectives-met\" className=\"font-bold\">Objectives Met (0-3)</Label>\n            <Input id=\"objectives-met\" type=\"number\" value={objectivesMet} onChange={(e) => setObjectivesMet(parseInt(e.target.value, 10))} min={0} max={3}/>\n          </div>\n           <div>\n            <Label htmlFor=\"target-number\" className=\"font-bold\">Target Number (TN)</Label>\n            <Input id=\"target-number\" type=\"number\" value={targetNumber} onChange={(e) => setTargetNumber(parseInt(e.target.value, 10))} min={1}/>\n          </div>\n           <div className=\"md:col-span-2\">\n            <Label htmlFor=\"assign-project\" className=\"font-bold\">Assign Roll to Project (Optional)</Label>\n             <Select value={assignedProjectId} onValueChange={(v) => setAssignedProjectId(v === \"none\" ? undefined : v)}>\n              <SelectTrigger id=\"assign-project\"><SelectValue placeholder=\"Select project to add progress...\" /></SelectTrigger>\n              <SelectContent>\n                 <SelectItem value=\"none\">Don't assign to a project</SelectItem>\n                {activeProjects.map((proj) => (\n                   <SelectItem key={proj.id} value={proj.id}>{proj.name} ({proj.progress}/{proj.goal})</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        <Separator />\n        \n        {isWillForgingActive && (\n          <div>\n              <Label htmlFor=\"willpower-spent\" className=\"font-bold flex items-center gap-2\">Will-Forging Discipline</Label>\n               <Input id=\"willpower-spent\" type=\"number\" value={willpowerSpent} onChange={(e) => setWillpowerSpent(Math.max(0, parseInt(e.target.value, 10) || 0))} min={0} max={character.willpower} placeholder={`Spend WP (Max: ${character.willpower})`}/>\n              <p className=\"text-sm text-muted-foreground mt-1\">Spend Willpower to add 2 successes per point.</p>\n          </div>\n        )}\n\n        {canUseTriumphForgingEye && (\n            <div className=\"flex items-center space-x-2 p-3 bg-secondary/30 rounded-lg\">\n                <Switch\n                    id=\"triumph-forging-eye\"\n                    checked={isTriumphForgingEyeActive}\n                    onCheckedChange={setIsTriumphForgingEyeActive}\n                />\n                <Label htmlFor=\"triumph-forging-eye\" className=\"font-bold\">Use Triumph-Forging Eye (Free Full Excellency)</Label>\n            </div>\n        )}\n\n        <div>\n            <Label htmlFor=\"excellency-dice\" className=\"font-bold flex items-center gap-2\">Craft Excellency</Label>\n             <TooltipProvider>\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                         <div className=\"flex items-center gap-4 mt-2\">\n                            <Slider\n                                id=\"excellency-dice\"\n                                min={0}\n                                max={maxExcellencyDice}\n                                step={1}\n                                value={[currentExcellencyDice]}\n                                onValueChange={(value) => setExcellencyDice(value[0])}\n                                className=\"flex-1\"\n                                disabled={isBrassScalesFallingActive || isTriumphForgingEyeActive}\n                            />\n                            <Badge variant=\"outline\" className={`flex items-center gap-2 text-base py-1 px-3 w-32 justify-center ${isBrassScalesFallingActive || isTriumphForgingEyeActive ? 'opacity-50' : ''}`}>\n                                <PlusCircle className=\"w-4 h-4 text-green-500\"/>\n                                <span>{currentExcellencyDice} Dice</span>\n                            </Badge>\n                            <Badge variant=\"outline\" className={`flex items-center gap-2 text-base py-1 px-3 w-32 justify-center ${isBrassScalesFallingActive || isTriumphForgingEyeActive ? 'opacity-50' : ''}`}>\n                                <Gem className=\"w-4 h-4 text-cyan-400\"/>\n                                <span>{isTriumphForgingEyeActive ? 0 : currentExcellencyDice} Motes</span>\n                            </Badge>\n                        </div>\n                    </TooltipTrigger>\n                    {(isBrassScalesFallingActive || isTriumphForgingEyeActive) && (\n                        <TooltipContent>\n                            {isBrassScalesFallingActive && <p>Craft Excellency is disabled by Brass Scales Falling.</p>}\n                            {isTriumphForgingEyeActive && <p>Craft Excellency is being provided by Triumph-Forging Eye.</p>}\n                        </TooltipContent>\n                    )}\n                </Tooltip>\n             </TooltipProvider>\n            <p className=\"text-sm text-muted-foreground mt-1\">1 Mote per die added, up to your base dice pool of {maxExcellencyDice}.</p>\n        </div>\n\n\n        {hasCosts && (\n        <div className=\"p-3 bg-secondary/30 rounded-lg\">\n            <h4 className=\"text-sm font-bold uppercase text-muted-foreground tracking-wider mb-2\">\n                Total Costs for this Action\n            </h4>\n            <div className=\"flex justify-center items-center gap-2 md:gap-4 flex-wrap\">\n                {charmCosts.motes > 0 && (\n                    <Badge variant=\"outline\" className=\"flex items-center gap-2 text-base py-1 px-3\">\n                        <Gem className=\"w-4 h-4 text-cyan-400\"/>\n                        <span>{charmCosts.motes} Motes</span>\n                    </Badge>\n                )}\n                {totalWillpowerCost > 0 && (\n                     <Badge variant=\"outline\" className=\"flex items-center gap-2 text-base py-1 px-3\">\n                        <Star className=\"w-4 h-4 text-yellow-400\"/>\n                        <span>{totalWillpowerCost} Willpower</span>\n                    </Badge>\n                )}\n                 {charmCosts.sxp > 0 && (\n                     <Badge variant=\"outline\" className=\"flex items-center gap-2 text-base py-1 px-3\">\n                         <Moon className=\"w-4 h-4 text-gray-400\"/>\n                         <span>{charmCosts.sxp} SXP</span>\n                    </Badge>\n                )}\n                 {charmCosts.gxp > 0 && (\n                     <Badge variant=\"outline\" className=\"flex items-center gap-2 text-base py-1 px-3\">\n                         <Sun className=\"w-4 h-4 text-yellow-500\"/>\n                         <span>{charmCosts.gxp} GXP</span>\n                    </Badge>\n                )}\n                 {charmCosts.wxp > 0 && (\n                     <Badge variant=\"outline\" className=\"flex items-center gap-2 text-base py-1 px-3\">\n                        <Star className=\"w-4 h-4 text-white\"/>\n                         <span>{charmCosts.wxp} WXP</span>\n                    </Badge>\n                )}\n            </div>\n        </div>\n        )}\n        <div className=\"text-center\">\n            <Button onClick={handleRollClick} disabled={isLoading} size=\"lg\" className=\"font-headline text-xl\">\n            {isLoading ? (<Loader2 className=\"mr-2 h-6 w-6 animate-spin\" />) : (<Dices className=\"mr-2 h-6 w-6\" />)}\n            Roll {totalDicePool} Dice\n            </Button>\n        </div>\n        \n        {diceRoll && (\n          <div className=\"pt-6 space-y-4\">\n            <h3 className=\"text-lg font-bold text-center font-headline\">\n              Roll Results\n            </h3>\n            \n            {diceRoll.diceHistories.length > 0 && (\n                <DiceDisplay diceRoll={diceRoll} isColorblindMode={isColorblindMode}/>\n            )}\n            <div className=\"text-center font-bold text-2xl font-headline flex items-center justify-center gap-2\">\n              {diceRoll.totalSuccesses >= diceRoll.targetNumber ? (\n                <CheckCircle2 className=\"w-8 h-8 text-green-500\" />\n              ) : (\n                <XCircle className=\"w-8 h-8 text-red-500\" />\n              )}\n              <span>\n                {diceRoll.totalSuccesses} Successes vs TN {diceRoll.targetNumber}\n              </span>\n            </div>\n             {(successSources.length > 0 || diceRoll.sxpFromCharm > 0 || diceRoll.bonusDiceFromCharm > 0) && (\n                <p className=\"text-center text-sm text-muted-foreground\">\n                    {successSources.length > 0 && `(${successSources.join(', ')})`}\n                    {diceRoll.sxpFromCharm > 0 && (\n                         <>\n                         {successSources.length > 0 ? ' | ' : ''}\n                         <span className=\"text-yellow-500 font-bold\">{`+${diceRoll.sxpFromCharm} SXP from Brass Scales Falling`}</span>\n                         </>\n                    )}\n                    {diceRoll.bonusDiceFromCharm > 0 && (\n                         <>\n                         {successSources.length > 0 || diceRoll.sxpFromCharm > 0 ? ' | ' : ''}\n                         <span className=\"text-purple-400 font-bold\">{`+${diceRoll.bonusDiceFromCharm} dice from Divine Inspiration`}</span>\n                         </>\n                    )}\n                </p>\n             )}\n            {diceRoll.activeCharmNames && diceRoll.activeCharmNames.length > 0 && (\n              <div className=\"text-center text-xs text-muted-foreground font-body\">\n                  <p className=\"font-bold\">Active Functional Charms:</p>\n                  <p>{diceRoll.activeCharmNames.join(', ')}</p>\n              </div>\n            )}\n            {activeNarrativeCharms.length > 0 && (\n                <div className=\"pt-4 space-y-2\">\n                    <Separator />\n                    <h4 className=\"text-center font-headline text-lg text-primary flex items-center justify-center gap-2\">\n                        <Book className=\"w-5 h-5\"/>\n                        Narrative Effects\n                    </h4>\n                    <div className=\"space-y-3 text-sm font-body p-3 bg-secondary/30 rounded-lg\">\n                        {activeNarrativeCharms.map(charm => (\n                            <div key={charm.id}>\n                                <p className=\"font-bold\">{charm.name}</p>\n                                <p className=\"text-muted-foreground\">{charm.description}</p>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n          </div>\n        )}\n        {aiOutcome && (\n          <Card className=\"mt-6 bg-background/50\">\n            <CardHeader>\n              <CardTitle className=\"font-headline flex items-center gap-2 text-primary\">\n                <Sparkles className=\"w-6 h-6\" />\n                {aiOutcome.outcomeTitle}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 font-body text-base\">\n                <p className=\"italic\">{aiOutcome.outcomeDescription}</p>\n                <Separator />\n                <div className=\"font-bold\">\n                    <h4 className=\"text-lg font-headline\">Rewards</h4>\n                    <p>SXP: {aiOutcome.experienceGained.sxp}</p>\n                    <p>GXP: {aiOutcome.experienceGained.gxp}</p>\n                    <p>WXP: {aiOutcome.experienceGained.wxp}</p>\n                </div>\n\n            </CardContent>\n          </Card>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
  "src/components/project-details.tsx": "\"use client\";\n\nimport type { Project, ProjectType } from \"@/lib/types\";\nimport { PROJECT_TYPES } from \"@/lib/types\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Briefcase, Star, Award } from \"lucide-react\";\n\ninterface ProjectDetailsProps {\n  project: Project;\n  setProject: (project: Project) => void;\n}\n\nexport default function ProjectDetails({\n  project,\n  setProject,\n}: ProjectDetailsProps) {\n  const handleProjectChange = (key: keyof Project, value: string) => {\n    const isNumeric = [\"artifactRating\", \"basicObjectives\"].includes(key);\n    const parsedValue = isNumeric ? parseInt(value, 10) : value;\n    setProject({ ...project, [key]: parsedValue });\n  };\n\n  const isSuperiorOrLegendary =\n    project.type.includes(\"superior\") || project.type.includes(\"legendary\");\n\n  return (\n    <Card className=\"bg-card/80 backdrop-blur-sm border-2 border-primary/20 shadow-lg\">\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <Briefcase className=\"w-8 h-8 text-primary\" />\n          <div className=\"flex-grow\">\n            <CardTitle className=\"font-headline text-2xl text-primary\">\n              Project Details\n            </CardTitle>\n            <CardDescription className=\"font-body\">\n              Define the specifics of your crafting project.\n            </CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid w-full items-center gap-2.5\">\n          <Label htmlFor=\"project-type\" className=\"font-bold text-lg font-body\">\n            Project Type\n          </Label>\n          <Select\n            value={project.type}\n            onValueChange={(value) => handleProjectChange(\"type\", value)}\n          >\n            <SelectTrigger id=\"project-type\" className=\"bg-background\">\n              <SelectValue placeholder=\"Select project type\" />\n            </SelectTrigger>\n            <SelectContent>\n              {PROJECT_TYPES.map((type) => (\n                <SelectItem key={type} value={type}>\n                  {type.replace(\"-\", \" \").replace(/\\b\\w/g, (l) => l.toUpperCase())}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {isSuperiorOrLegendary && (\n          <div className=\"grid w-full items-center gap-2.5\">\n            <Label htmlFor=\"artifact-rating\" className=\"font-bold text-lg font-body flex items-center gap-2\">\n              <Star className=\"w-5 h-5 text-yellow-500\" />\n              Artifact Rating\n            </Label>\n            <Select\n              value={project.artifactRating.toString()}\n              onValueChange={(value) =>\n                handleProjectChange(\"artifactRating\", value)\n              }\n            >\n              <SelectTrigger id=\"artifact-rating\" className=\"bg-background\">\n                <SelectValue placeholder=\"Select rating\" />\n              </SelectTrigger>\n              <SelectContent>\n                {[1, 2, 3, 4, 5].map((val) => (\n                  <SelectItem key={val} value={val.toString()}>\n                    {val}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        )}\n\n        <div className=\"grid w-full items-center gap-2.5\">\n          <Label htmlFor=\"basic-objectives\" className=\"font-bold text-lg font-body flex items-center gap-2\">\n            <Award className=\"w-5 h-5 text-green-500\" />\n            Basic Objectives Met\n          </Label>\n          <Select\n            value={project.basicObjectives.toString()}\n            onValueChange={(value) =>\n              handleProjectChange(\"basicObjectives\", value)\n            }\n          >\n            <SelectTrigger id=\"basic-objectives\" className=\"bg-background\">\n              <SelectValue placeholder=\"Select objectives\" />\n            </SelectTrigger>\n            <SelectContent>\n              {[0, 1, 2, 3].map((val) => (\n                <SelectItem key={val} value={val.toString()}>\n                  {val}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
  "src/components/ui/accordion.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
  "src/components/ui/alert-dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
  "src/components/ui/alert.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
  "src/components/ui/avatar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
  "src/components/ui/badge.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
  "src/components/ui/button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
  "src/components/ui/calendar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
  "src/components/ui/card.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
  "src/components/ui/carousel.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
  "src/components/ui/chart.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> & \n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & \n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
  "src/components/ui/checkbox.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
  "src/components/ui/collapsible.tsx": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
  "src/components/ui/dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
  "src/components/ui/dropdown-menu.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
  "src/components/ui/form.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
  "src/components/ui/input.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
  "src/components/ui/label.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
  "src/components/ui/menubar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
  "src/components/ui/popover.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
  "src/components/ui/progress.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
  "src/components/ui/radio-group.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
  "src/components/ui/rating-control.tsx": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface RatingControlProps {\n  value: number;\n  max: number;\n  onValueChange: (value: number) => void;\n}\n\nexport function RatingControl({ value, max, onValueChange }: RatingControlProps) {\n  return (\n    <div className=\"flex items-center space-x-1\">\n      {[...Array(max)].map((_, i) => (\n        <button\n          key={i}\n          type=\"button\"\n          onClick={() => onValueChange(i + 1)}\n          className={cn(\n            \"w-6 h-6 rounded-full border-2 transition-colors\",\n            i < value\n              ? \"bg-primary border-primary-foreground\"\n              : \"bg-background hover:bg-primary/20\"\n          )}\n          aria-label={`Set rating to ${i + 1}`}\n        />\n      ))}\n    </div>\n  );\n}\n",
  "src/components/ui/scroll-area.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
  "src/components/ui/select.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
  "src/components/ui/separator.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
  "src/components/ui/sheet.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
  "src/components/ui/sidebar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent)))\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
  "src/components/ui/skeleton.tsx": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
  "src/components/ui/slider.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
  "src/components/ui/switch.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
  "src/components/ui/table.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
  "src/components/ui/tabs.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
  "src/components/ui/textarea.tsx": "import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n",
  "src/components/ui/toast.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
  "src/components/ui/toaster.tsx": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
  "src/components/ui/tooltip.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
  "src/hooks/use-mobile.tsx": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
  "src/hooks/use-toast.ts": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
  "src/lib/charms.ts": "\nimport type { Charm } from \"./types\";\n\nconst toId = (name: string) =>\n  name.toLowerCase().replace(/\\s+/g, \"-\").replace(/[^a-z0-9-]/g, \"\");\n\n/**\n * @fileoverview This file is the single source of truth for all charm definitions.\n * It follows a \"data-only\" approach, containing no business logic.\n * Charms are organized by minimum Essence level for clarity and maintainability.\n */\n\n// =================================================================\n// ESSENCE 1 CHARMS\n// =================================================================\n\nconst essence1Charms: Charm[] = [\n  {\n    id: toId(\"Tireless Workhorse Method\"),\n    name: \"Tireless Workhorse Method\",\n    description: \"Permanently grants two major project slots per dot of Essence the Solar possesses.\",\n    minCraft: 2,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Efficient Craftsman Technique\"),\n    name: \"Efficient Craftsman Technique\",\n    cost: \"â€”\",\n    description: \"This Charm permanently reduces the cost of temporary major slots to three silver points.\",\n    minCraft: 3,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Arete-Shifting Prana\"),\n    name: \"Arete-Shifting Prana\",\n    cost: \"4m, 1sxp, 1wp\",\n    description: \"Roll (Intelligence + Craft). For each success, convert a dot from one known Craft into a related one for a single project.\",\n    minCraft: 4,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Brass Scales Falling\"),\n    name: \"Brass Scales Falling\",\n    cost: \"â€”\",\n    description: \"For each 10 on a Craft roll made without using the Craft Excellency, the Exalt earns a silver point, to a limit of (Essence * 2) points. Disables Excellency.\",\n    minCraft: 3,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'functional',\n  },\n  {\n    id: toId(\"Red Anvils Ringing\"),\n    name: \"Red Anvils Ringing\",\n    cost: \"â€”\",\n    description: \"Increases the amount of silver points gained from each basic objective by one.\",\n    minCraft: 4,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'functional',\n  },\n   {\n    id: toId(\"Chains Fall Away\"),\n    name: \"Chains Fall Away\",\n    cost: \"â€”\",\n    description: \"Each time the Solar achieves all three basic objectives on any Craft project, she gains one gold point.\",\n    minCraft: 5,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Flawless Handiwork Method\"),\n    name: \"Flawless Handiwork Method\",\n    cost: \"3m\",\n    description: \"Craft rolls supplemented by this Charm reroll 10s until no more appear (dice explode).\",\n    minCraft: 1,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'functional',\n  },\n   {\n    id: toId(\"Triumph-Forging Eye\"),\n    name: \"Triumph-Forging Eye\",\n    cost: \"â€”\",\n    description: \"Once per week, the Exalt may apply a free full Craft Excellency to any one roll.\",\n    minCraft: 2,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'functional',\n  },\n  {\n    id: toId(\"Supreme Masterwork Focus\"),\n    name: \"Supreme Masterwork Focus\",\n    description: \"A multi-tiered charm that improves the quality of successes on crafting rolls and causes high-value dice to explode.\",\n    minCraft: 3,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'functional',\n    subEffects: [\n      {\n        id: toId(\"Supreme Masterwork Focus-1\"),\n        name: \"Level 1: Double & Explode Nines\",\n        cost: \"5m, 1wp\",\n        description: \"Supplements (Attribute + Craft) rolls for basic/major projects with double 9s. Each 9 also explodes.\",\n        minCraft: 3,\n        minEssence: 1,\n        effect: { type: \"double_success\", value: 9 },\n      },\n      {\n        id: toId(\"Supreme Masterwork Focus-2\"),\n        name: \"Level 2: Double & Explode Eights\",\n        cost: \"5m, 1wp, 1gxp\",\n        description: \"Repurchase for double 8s on basic, major, or superior project rolls. Each 8 also explodes.\",\n        minCraft: 5,\n        minEssence: 2,\n        effect: { type: \"double_success\", value: 8 },\n      },\n      {\n        id: toId(\"Supreme Masterwork Focus-3\"),\n        name: \"Level 3: Double & Explode Sevens\",\n        cost: \"2m, 1wxp\",\n        description: \"A third repurchase grants double 7s on any (Attribute + Craft) roll. Each 7 also explodes.\",\n        minCraft: 5,\n        minEssence: 3,\n        effect: { type: \"double_success\", value: 7 },\n      },\n    ],\n  },\n  {\n    id: toId(\"Unsurpassed Masterpiece Method\"),\n    name: \"Unsurpassed Masterpiece Method\",\n    cost: \"5m\",\n    description: \"Add automatic successes to a Craft roll equal to character's Essence.\",\n    minCraft: 3,\n    minEssence: 1,\n    effect: { type: \"add_successes_per_essence\", value: 1 },\n    category: 'functional',\n  },\n  {\n    id: toId(\"Crack-Mending Technique\"),\n    name: \"Crack-Mending Technique\",\n    cost: \"5m\",\n    description: \"Repairs extremely damaged objects. Can lower repair difficulty by 1 for fragmented Artifacts.\",\n    minCraft: 3,\n    minEssence: 1,\n    effect: { type: \"lower_repair_difficulty\", value: 1 },\n    category: 'functional',\n  },\n  {\n    id: toId(\"Craftsman Needs No Tools\"),\n    name: \"Craftsman Needs No Tools\",\n    cost: \"5m\",\n    description: \"Allows starting and completing basic/major projects rapidly without tools or workshop, shaping material directly.\",\n    minCraft: 3,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Durability-Enhancing Technique\"),\n    name: \"Durability-Enhancing Technique\",\n    cost: \"5m\",\n    description: \"Doubles the objectâ€™s health levels and resistance to damage. A classic for any serious artisan.\",\n    minCraft: 3,\n    minEssence: 1,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n];\n\n\n// =================================================================\n// ESSENCE 2 CHARMS\n// =================================================================\n\nconst essence2Charms: Charm[] = [\n {\n    id: toId(\"Experiential Conjuring of True Void\"),\n    name: \"Experiential Conjuring of True Void\",\n    cost: \"4m, 4xp\", // XP cost is variable\n    description: \"Grants 1 automatic success and adds (Essence) dice, or (Intelligence + Essence) at E3+. Cannot be used on basic projects.\",\n    minCraft: 3,\n    minEssence: 2,\n    effect: { type: \"custom\" },\n    category: 'functional',\n    subEffects: [\n      {\n        id: toId(\"First Movement of the Demiurge\"),\n        name: \"FMD: First Movement of the Demiurge\",\n        description: \"Permanent upgrade. For every three of a kind successes, convert a non-success die to a 10.\",\n        minCraft: 4,\n        minEssence: 2,\n        effect: { type: \"custom\" },\n      }\n    ]\n  },\n  {\n    id: toId(\"Thousand-Forge Hands\"),\n    name: \"Thousand-Forge Hands\",\n    cost: \"10m, 1wp\",\n    description: \"Allows the Solar to complete a full day's work on a basic or major project without need for rest, finishing a work interval.\",\n    minCraft: 4,\n    minEssence: 2,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Hundred-Hand Style\"),\n    name: \"Hundred-Hand Style\",\n    cost: \"10m, 1wp\",\n    description: \"Allows the Solar to work on (Essence) basic or major projects at once for a single day.\",\n    minCraft: 4,\n    minEssence: 2,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Words-as-Workshop Method\"),\n    name: \"Words-as-Workshop Method\",\n    cost: \"10m\",\n    description: \"The Solar can direct other craftsmen, their hands guided by her genius. Her (Attribute + Craft) roll can be used for a project even if she never touches it.\",\n    minCraft: 4,\n    minEssence: 2,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Supreme Celestial Focus\"),\n    name: \"Supreme Celestial Focus\",\n    cost: \"â€”\",\n    description: \"This Charm allows the Exalt to raise an additional Craft rating from one to five by paying gold points instead of experience. The Exalt may raise up to (Essence) additional Craft ratings in this fashion, but each one after the first costs double the amount of gold points.\",\n    minCraft: 5,\n    minEssence: 2,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Sublime Transference\"),\n    name: \"Sublime Transference\",\n    cost: \"6m\",\n    description: \"Allows rearranging crafting points: 2 SXP to 1 GXP, 2 GXP to 1 WXP, and vice-versa. Each conversion direction requires a separate activation.\",\n    minCraft: 5,\n    minEssence: 2,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Ages-Echoing Wisdom\"),\n    name: \"Ages-Echoing Wisdom\",\n    cost: \"â€”\",\n    description: \"Gain a number of gold points equal to your permanent major project slots. This bonus recurs at the end of each story.\",\n    minCraft: 5,\n    minEssence: 2,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Dragon Soul Emergence\"),\n    name: \"Dragon Soul Emergence\",\n    cost: \"â€”\",\n    description: \"Grants one permanent superior project slot. This Charm may be purchased up to (Essence) times.\",\n    minCraft: 5,\n    minEssence: 2,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n];\n\n\n// =================================================================\n// ESSENCE 3 CHARMS\n// =================================================================\n\nconst essence3Charms: Charm[] = [\n  {\n    id: toId(\"Will-Forging Discipline\"),\n    name: \"Will-Forging Discipline\",\n    cost: \"1wp per 2 succ.\",\n    description: \"Spend Willpower to add automatic successes to a Craft roll. Each point of Willpower adds two successes.\",\n    minCraft: 5,\n    minEssence: 3,\n    effect: { type: \"add_successes\", value: 2 },\n    category: 'functional',\n  },\n   {\n    id: toId(\"Ever-Ready Innovation Discipline\"),\n    name: \"Ever-Ready Innovation Discipline\",\n    cost: \"15m, 1wp\",\n    description: \"Retroactively complete a major project as a plot device. Prereq: Thousand-Forge Hands. Requires 15+ SXP on hand to activate (SXP is not spent). May be used (Essence/2) times per story. Clever use may grant bonus XP.\",\n    minCraft: 5,\n    minEssence: 3,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Copper Spider Conception\"),\n    name: \"Copper Spider Conception\",\n    cost: \"5m, 1wp\",\n    description: \"Lowers the cost of creating a superior slot by two gold points and two major slots, to a minimum of one major slot and one gold point.\",\n    minCraft: 5,\n    minEssence: 3,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Clay and Breath Practice\"),\n    name: \"Clay and Breath Practice\",\n    cost: \"â€”\",\n    description: \"On a superior roll with successes exceeding the finishing price, earn silver points equal to (Artifact Rating + Essence).\",\n    minCraft: 5,\n    minEssence: 3,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Spirit-Gathering Industry\"),\n    name: \"Spirit-Gathering Industry\",\n    cost: \"â€”\",\n    description: \"Permanently reduces the cost to finish a superior project by (Essence) gold points, to a minimum of three.\",\n    minCraft: 5,\n    minEssence: 3,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Summit-Piercing Touch\"),\n    name: \"Summit-Piercing Touch\",\n    cost: \"10m, 1wp\",\n    description: \"Allows crafting a two-dot Artifact (or three-dot at Essence 5+) in a major project slot.\",\n    minCraft: 5,\n    minEssence: 3,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Vice-Miracle Technique\"),\n    name: \"Vice-Miracle Technique\",\n    cost: \"â€”\",\n    description: \"Once per season, produce a finished two-dot Artifact (or three-dot at Essence 5+) for free, earning bonus GXP for clever narrative use.\",\n    minCraft: 5,\n    minEssence: 3,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Divine Inspiration Technique\"),\n    name: \"Divine Inspiration Technique\",\n    cost: \"â€”\",\n    description: \"For every 3 successes on a Craft roll, gain an additional non-Charm die. This effect is recursive.\",\n    minCraft: 5,\n    minEssence: 3,\n    effect: { type: \"custom\" },\n    category: 'functional',\n  },\n];\n\n// =================================================================\n// ESSENCE 4 CHARMS\n// =================================================================\n\nconst essence4Charms: Charm[] = [\n  {\n    id: toId(\"Holistic Miracle Understanding\"),\n    name: \"Holistic Miracle Understanding\",\n    cost: \"â€”\",\n    description: \"Enhances Divine Inspiration Technique. If a wave of generated non-Charm dice yields 3+ successes, add 3 more dice to the next wave.\",\n    minCraft: 5,\n    minEssence: 4,\n    effect: { type: \"custom\" },\n    category: 'functional',\n  },\n  {\n    id: toId(\"World-Defining Artifice\"),\n    name: \"World-Defining Artifice\",\n    cost: \"15m, 1wp\",\n    description: \"Allows the creation of demesnes, manses, and other reality-shaping constructs outside the normal crafting rules.\",\n    minCraft: 5,\n    minEssence: 4,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Unwinding Gyre Meditation\"),\n    name: \"Unwinding Gyre Meditation\",\n    cost: \"10m, 1wp\",\n    description: \"After a successful superior project, void the GXP bonus to reduce the goal number of the next project of the same rating and enhance its GXP bonus multiplier.\",\n    minCraft: 5,\n    minEssence: 4,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"God-Forge Within\"),\n    name: \"God-Forge Within\",\n    cost: \"â€”\",\n    description: \"Each purchase grants the Exalt two permanent legendary project slots. Can be purchased (Essence) times.\",\n    minCraft: 5,\n    minEssence: 4,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n];\n\n// =================================================================\n// ESSENCE 5 CHARMS\n// =================================================================\n\nconst essence5Charms: Charm[] = [\n  {\n    id: toId(\"Exegesis of the Distilled Form\"),\n    name: \"Exegesis of the Distilled Form\",\n    cost: \"25sxp, 15gxp, 10wxp+\",\n    description: \"After completing five legendary projects, expend vast creative energy to convert remaining WXP into general experience points, once per story.\",\n    minCraft: 5,\n    minEssence: 5,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Sun-Heart Tenacity\"),\n    name: \"Sun-Heart Tenacity\",\n    cost: \"â€”\",\n    description: \"Each time a legendary project is completed, gain 10 automatic non-Charm successes for the next superior or legendary project she attempts to finish.\",\n    minCraft: 5,\n    minEssence: 5,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Wonder-Forging Genius\"),\n    name: \"Wonder-Forging Genius\",\n    cost: \"â€”\",\n    description: \"Once per story, when you have ten or more legendary projects, she may use this Charm to complete one of them without further rolls or expenditures of craft points.\",\n    minCraft: 5,\n    minEssence: 5,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n  {\n    id: toId(\"Dual Magnus Prana\"),\n    name: \"Dual Magnus Prana\",\n    cost: \"30wxp\",\n    description: \"Retroactively reveal that a seemingly slain character was a perfect simulacrum, allowing the real Solar to be located elsewhere. A sorcerous escape from death.\",\n    minCraft: 5,\n    minEssence: 5,\n    effect: { type: \"custom\" },\n    category: 'narrative',\n  },\n];\n\n\n// =================================================================\n// EXPORT ALL CHARMS\n// =================================================================\n\nexport const allCharms: Charm[] = [\n    ...essence1Charms,\n    ...essence2Charms,\n    ...essence3Charms,\n    ...essence4Charms,\n    ...essence5Charms,\n];\n",
  "src/lib/crafting-calculator.ts": "import type { ProjectType, CraftingOutcome } from \"./types\";\n\ninterface CraftingInput {\n  project: {\n    type: ProjectType;\n    artifactRating: number;\n    objectivesMet: number;\n  };\n  successes: number;\n  targetNumber: number;\n  isExceptional: boolean;\n  intervalsRemaining?: number;\n  legendaryBonusRoll?: number[];\n  activeCharms: string[];\n}\n\nconst outcomes = {\n  failure: {\n    title: \"An Unfortunate Setback\",\n    description:\n      \"Despite your best efforts, the materials refuse to cooperate. The project is marred by a critical flaw, requiring you to either start over or spend significant time correcting the mistake. A lesson in humility.\",\n  },\n  success: {\n    title: \"A Masterful Creation\",\n    description:\n      \"Your skilled hands have worked their magic. The object is well-made, functional, and bears the hallmark of a true artisan. It will serve its purpose admirably.\",\n  },\n  exceptionalSuccess: {\n    title: \"A Work of True Genius\",\n    description:\n      \"You have surpassed mere craftsmanship and touched upon the sublime. The final product is a thing of beauty and remarkable quality, exceeding all expectations. It may even possess minor, unintended beneficial properties.\",\n  },\n  superiorSuccess: {\n      title: \"Echoes of the First Age\",\n      description: \"The Essence of the Unconquered Sun flows through your work. The artifact hums with power, its form perfected, its function absolute. You have forged a legend.\"\n  },\n  legendarySuccess: {\n      title: \"A New Star in Heaven\",\n      description: \"This is no mere object, but a myth made manifest. Its creation sends ripples through the fabric of Creation, a testament to a will that can forge reality itself. Its destiny is now intertwined with your own.\"\n  }\n};\n\nexport function calculateCraftingOutcome(\n  input: CraftingInput,\n): CraftingOutcome {\n  const { project, successes, targetNumber, isExceptional, activeCharms } = input;\n  const isSuccess = successes >= targetNumber;\n\n  let sxp = 0;\n  let gxp = 0;\n  let wxp = 0;\n  let outcomeTitle = \"\";\n  let outcomeDescription = \"\";\n\n  if (!isSuccess) {\n    outcomeTitle = outcomes.failure.title;\n    outcomeDescription = outcomes.failure.description;\n  } else {\n    // Determine title and description based on success level\n    if (project.type.startsWith(\"legendary\")) {\n        outcomeTitle = outcomes.legendarySuccess.title;\n        outcomeDescription = outcomes.legendarySuccess.description;\n    } else if (project.type.startsWith(\"superior\")) {\n        outcomeTitle = outcomes.superiorSuccess.title;\n        outcomeDescription = outcomes.superiorSuccess.description;\n    } else if (isExceptional) {\n        outcomeTitle = outcomes.exceptionalSuccess.title;\n        outcomeDescription = outcomes.exceptionalSuccess.description;\n    } else {\n        outcomeTitle = outcomes.success.title;\n        outcomeDescription = outcomes.success.description;\n    }\n\n    // Calculate XP based on project type\n    switch (project.type) {\n      case \"basic-project\":\n        sxp = (isExceptional ? 3 : 2) * project.objectivesMet;\n        break;\n      case \"basic-repair\":\n        sxp = 1 * project.objectivesMet;\n        break;\n      case \"major-project\":\n        gxp = (isExceptional ? 3 : 2) * project.objectivesMet;\n        sxp = 1 * project.objectivesMet;\n        break;\n      case \"major-repair\":\n        gxp = 1 * project.objectivesMet;\n        break;\n      case \"superior-project\":\n        if (project.objectivesMet >= 1) {\n            const wxpMap: { [key: number]: number } = { 2: 3, 3: 5, 4: 7, 5: 9 };\n            wxp = wxpMap[project.artifactRating] || 0;\n        }\n        // Assuming intervalsRemaining is passed for gxp calculation\n        gxp = (project.artifactRating * 2) * (input.intervalsRemaining || 0);\n        break;\n      case \"superior-repair\":\n         wxp = (project.artifactRating - 1);\n        break;\n      case \"legendary-project\":\n        if (project.objectivesMet >= 1) {\n            wxp = 10;\n        }\n        // Handle legendary bonus roll\n        if (input.legendaryBonusRoll) {\n            input.legendaryBonusRoll.forEach(die => {\n                if (die >= 7) gxp++;\n                else sxp++;\n            });\n        }\n        break;\n      case \"legendary-repair\":\n        // No XP for legendary repair\n        break;\n    }\n    \n    // Apply charm effects on XP\n    if (activeCharms.includes(\"red-anvils-ringing\")) {\n        if (project.type === \"basic-project\" || project.type === \"basic-repair\") {\n            sxp += project.objectivesMet;\n        }\n    }\n  }\n\n\n\n  return {\n    isSuccess,\n    outcomeTitle,\n    outcomeDescription,\n    experienceGained: {\n      sxp: Math.max(0, sxp),\n      gxp: Math.max(0, gxp),\n      wxp: Math.max(0, wxp),\n    },\n  };\n}\n",
  "src/lib/dice-logic.ts": "\nimport type { Character, DiceRoll, DieResult } from \"./types\";\nimport { allCharms } from \"./charms\";\n\nconst ANIMATION_DELAY = 100;\n\n// --- Helper Functions ---\n\nconst rollDie = (): DieResult => ({ value: Math.floor(Math.random() * 10) + 1 });\n\n\nexport const shouldDieExplode = (die: DieResult, activeCharms: string[]): boolean => {\n  // A die that has already been modified (e.g., is the result of a previous explosion) should not cause another explosion.\n  if (die.isModified) return false;\n\n  const roll = die.value;\n\n  if (roll === 10) {\n    return activeCharms.includes(\"flawless-handiwork-method\");\n  }\n  if (roll === 9) {\n    return activeCharms.includes('supreme-masterwork-focus-1');\n  }\n  if (roll === 8) {\n    return activeCharms.includes('supreme-masterwork-focus-2');\n  }\n  if (roll === 7) {\n    return activeCharms.includes('supreme-masterwork-focus-3');\n  }\n  \n  return false;\n};\n\nconst getExplosionSource = (roll: number, activeCharms: string[]): string | undefined => {\n    if (activeCharms.includes(\"flawless-handiwork-method\") && roll === 10) return \"Flawless Handiwork Method\";\n    if (activeCharms.includes('supreme-masterwork-focus-1') && roll === 9) return \"Supreme Masterwork Focus Lvl 1\";\n    if (activeCharms.includes('supreme-masterwork-focus-2') && roll === 8) return \"Supreme Masterwork Focus Lvl 2\";\n    if (activeCharms.includes('supreme-masterwork-focus-3') && roll === 7) return \"Supreme Masterwork Focus Lvl 3\";\n    return undefined;\n}\n\n\nexport const calculateSuccesses = (roll: number, activeCharms: string[]) => {\n  // 10 always counts as 2 successes\n  if (roll >= 10) return 2;\n  \n  // Check for SMF upgrades for 7, 8, 9\n  if (roll === 9 && activeCharms.includes('supreme-masterwork-focus-1')) return 2;\n  if (roll === 8 && activeCharms.includes('supreme-masterwork-focus-2')) return 2;\n  if (roll === 7 && activeCharms.includes('supreme-masterwork-focus-3')) return 2;\n\n  // Otherwise, 7, 8, 9 are 1 success\n  if (roll >= 7) return 1;\n  \n  // Anything else is 0 successes\n  return 0;\n};\n\nconst calculateSuccessesFromWave = (wave: DieResult[], activeCharms: string[]): number => {\n    return wave.reduce((sum, die) => sum + calculateSuccesses(die.value, activeCharms), 0);\n}\n\n\n// --- Main Logic Function ---\n\ninterface DiceRollInput {\n  character: Character;\n  activeCharms: string[];\n  targetNumber: number;\n  willpowerSpent: number;\n  excellencyDice: number;\n  onProgress: (interimRoll: DiceRoll) => void;\n}\n\nexport const performDiceRoll = async (input: DiceRollInput): Promise<DiceRoll> => {\n    const { character, activeCharms, targetNumber, willpowerSpent, excellencyDice, onProgress } = input;\n    \n    await new Promise(resolve => setTimeout(resolve, 50));\n\n    let initialDicePool = character[character.selectedAttribute] + character.craft + excellencyDice;\n    let automaticSuccesses = 0;\n    \n    const isVoidConjuringActive = activeCharms.includes('experiential-conjuring-of-true-void');\n    if (isVoidConjuringActive) {\n        automaticSuccesses += 1;\n        if (character.essence >= 3) {\n            initialDicePool += character.intelligence + character.essence;\n        } else {\n            initialDicePool += character.essence;\n        }\n    }\n\n    const diceHistories: DieResult[][] = [];\n    \n    // Initial Roll\n    let currentWave = Array.from({ length: initialDicePool }, rollDie);\n    diceHistories.push(currentWave);\n    \n    const isFMDActive = activeCharms.includes('first-movement-of-the-demiurge');\n    let fmdConversionCounter = 0;\n\n    // --- Iterative Loop for FMD and Explosions ---\n    let keepLooping = true;\n    while(keepLooping) {\n        \n        onProgress({ diceHistories, totalSuccesses: 0, automaticSuccesses, targetNumber, activeCharmNames: [], activeCharmIds: activeCharms, excellencyDice, sxpFromCharm: 0, bonusDiceFromCharm: 0 });\n        await new Promise(resolve => setTimeout(resolve, ANIMATION_DELAY));\n\n        const nextWave: DieResult[] = [];\n        \n        // Step 1: FMD - Three-of-a-kind conversions\n        if (isFMDActive) {\n            const allDiceForFMDCheck = diceHistories.flat();\n            const successDiceInPlay = allDiceForFMDCheck.filter(d => calculateSuccesses(d.value, activeCharms) > 0 && !d.usedForFMD);\n            const successCounts: { [key: number]: DieResult[] } = {};\n            \n            successDiceInPlay.forEach(d => {\n                if(!successCounts[d.value]) successCounts[d.value] = [];\n                successCounts[d.value].push(d);\n            });\n\n            for (const value in successCounts) {\n                 const diceGroup = successCounts[value];\n                 const numTriggers = Math.floor(diceGroup.length / 3);\n\n                 if (numTriggers > 0) {\n                     const diceToMarkUsed = diceGroup.slice(0, numTriggers * 3);\n                     diceToMarkUsed.forEach(d => d.usedForFMD = true);\n                     \n                     const nonSuccessDiceToConvert = allDiceForFMDCheck\n                        .filter(d => calculateSuccesses(d.value, activeCharms) === 0 && !d.modification)\n                        .slice(0, numTriggers);\n\n                     for (const dieToChange of nonSuccessDiceToConvert) {\n                         fmdConversionCounter++;\n                         dieToChange.modification = 'fmd_source';\n                         dieToChange.modificationSource = 'First Movement of the Demiurge';\n                         dieToChange.fmdId = fmdConversionCounter;\n\n                         const newDie: DieResult = {\n                             value: 10,\n                             initialValue: dieToChange.value,\n                             modification: 'conversion',\n                             modificationSource: 'First Movement of the Demiurge',\n                             fmdId: fmdConversionCounter,\n                         };\n                         nextWave.push(newDie);\n                     }\n                 }\n            }\n        }\n        \n        // Step 2: Explosions from the most recent wave\n        const explodingDice = currentWave.filter(d => shouldDieExplode(d, activeCharms));\n        \n        for(const explodingDie of explodingDice) {\n            explodingDie.isModified = true; // Mark it as processed for this chain\n            \n            const newDie = rollDie();\n            newDie.initialValue = explodingDie.value;\n            newDie.modification = 'explosion';\n            newDie.modificationSource = getExplosionSource(explodingDie.value, activeCharms);\n            nextWave.push(newDie);\n        }\n\n        if(nextWave.length > 0) {\n            diceHistories.push(nextWave);\n            currentWave = nextWave;\n        } else {\n            keepLooping = false;\n        }\n    }\n\n    // --- Divine Inspiration Technique & Holistic Miracle Understanding ---\n    const isDivineInspirationActive = activeCharms.includes('divine-inspiration-technique');\n    const isHolisticMiracleActive = activeCharms.includes('holistic-miracle-understanding');\n    let bonusDiceFromCharm = 0;\n    if (isDivineInspirationActive) {\n        let keepGenerating = true;\n        let additionalDiceFromHolistic = 0;\n\n        while(keepGenerating) {\n            const allDiceInPool = diceHistories.flat().filter(d => d.modification !== 'fmd_source');\n            let currentTotalSuccesses = 0;\n            allDiceInPool.forEach(die => {\n                currentTotalSuccesses += calculateSuccesses(die.value, activeCharms);\n            });\n            currentTotalSuccesses += automaticSuccesses;\n\n            let diceToGenerate = Math.floor(currentTotalSuccesses / 3) - bonusDiceFromCharm;\n            diceToGenerate += additionalDiceFromHolistic;\n            additionalDiceFromHolistic = 0; // Reset for next iteration\n\n            if (diceToGenerate > 0) {\n                bonusDiceFromCharm += diceToGenerate;\n                const newWave = Array.from({ length: diceToGenerate }, rollDie);\n                newWave.forEach(d => d.modificationSource = \"Divine Inspiration Technique\");\n                \n                diceHistories.push(newWave);\n                onProgress({ diceHistories, totalSuccesses: 0, automaticSuccesses, targetNumber, activeCharmNames: [], activeCharmIds: activeCharms, excellencyDice, sxpFromCharm: 0, bonusDiceFromCharm });\n                await new Promise(resolve => setTimeout(resolve, ANIMATION_DELAY));\n\n                // Check for Holistic Miracle Understanding\n                if (isHolisticMiracleActive) {\n                    const successesFromNewWave = calculateSuccessesFromWave(newWave, activeCharms);\n                    if (successesFromNewWave >= 3) {\n                        additionalDiceFromHolistic += 3;\n                    }\n                }\n\n            } else {\n                keepGenerating = false;\n            }\n        }\n    }\n\n    // --- Final Calculation & Return ---\n    const finalDicePool = diceHistories.flat();\n    let totalSuccesses = 0;\n    \n    // Only count successes from dice that weren't the source for FMD\n    finalDicePool.filter(d => d.modification !== 'fmd_source').forEach(die => {\n        totalSuccesses += calculateSuccesses(die.value, activeCharms);\n    });\n\n    const activeCharmDetails = allCharms.flatMap(charm => {\n        const charms = [];\n        if (activeCharms.includes(charm.id)) charms.push(charm);\n        if (charm.subEffects) {\n            charm.subEffects.forEach(subCharm => {\n                if (activeCharms.includes(subCharm.id)) charms.push(subCharm);\n            });\n        }\n        return charms;\n    });\n\n    activeCharmDetails.forEach((charm) => {\n        if (charm.id === 'will-forging-discipline') {\n            automaticSuccesses += willpowerSpent * 2;\n        }\n        else if (charm.id !== 'experiential-conjuring-of-true-void' && charm.effect.type === \"add_successes\") {\n            automaticSuccesses += charm.effect.value || 0;\n        }\n        else if (charm.effect.type === \"add_successes_per_essence\") {\n            automaticSuccesses += character.essence * (charm.effect.value || 0);\n        }\n    });\n\n    let sxpFromCharm = 0;\n    if (activeCharms.includes('brass-scales-falling') && excellencyDice === 0) {\n        const tensRolled = finalDicePool.filter(d => d.value === 10).length;\n        const sxpCap = character.essence * 2; // Assuming base charm, not repurchased\n        sxpFromCharm = Math.min(tensRolled, sxpCap);\n    }\n\n\n    const finalTotalSuccesses = totalSuccesses + automaticSuccesses;\n\n    const finalResult: DiceRoll = {\n        diceHistories: diceHistories,\n        totalSuccesses: finalTotalSuccesses,\n        automaticSuccesses,\n        targetNumber: targetNumber,\n        activeCharmNames: activeCharmDetails.filter(c => c.category === 'functional').map(c => c.name),\n        activeCharmIds: activeCharms,\n        excellencyDice,\n        sxpFromCharm,\n        bonusDiceFromCharm,\n    };\n\n    // Final progress update with all data\n    onProgress(finalResult);\n\n    return finalResult;\n};\n",
  "src/lib/types.ts": "\n\nexport const ATTRIBUTES = [\n  \"intelligence\",\n  \"wits\",\n  \"perception\",\n  \"strength\",\n  \"dexterity\",\n  \"stamina\",\n  \"charisma\",\n  \"manipulation\",\n  \"appearance\",\n] as const;\n\nexport type Attribute = (typeof ATTRIBUTES)[number];\n\nexport const PROJECT_TYPES = [\n    \"basic-project\",\n    \"major-project\",\n    \"superior-project\",\n    \"legendary-project\",\n    \"basic-repair\",\n    \"major-repair\",\n    \"superior-repair\",\n    \"legendary-repair\",\n  ] as const;\n\nexport type ProjectType = (typeof PROJECT_TYPES)[number];\n\nexport interface Project {\n  type: ProjectType;\n  artifactRating: number; // 0 for non-artifacts\n  objectivesMet: number;\n}\n\nexport interface ActiveProject {\n  id: string;\n  name: string;\n  type: ProjectType;\n  goal: number;\n  progress: number;\n  isComplete: boolean;\n}\n\nexport interface CraftingExperience {\n  sxp: number;\n  gxp: number;\n  wxp: number;\n}\n\n\nexport interface Character {\n  intelligence: number;\n  wits: number;\n  perception: number;\n  strength: number;\n  dexterity: number;\n  stamina: number;\n  charisma: number;\n  manipulation: number;\n  appearance: number;\n  craft: number;\n  essence: number;\n  personalMotes: number;\n  peripheralMotes: number;\n  willpower: number;\n  selectedAttribute: Attribute;\n  knownCharms: string[]; // Array of charm IDs\n}\n\nexport interface CharmEffect {\n  type:\n    | \"add_successes\"\n    | \"add_successes_per_essence\"\n    | \"reroll_failures\"\n    | \"reroll_tens\"\n    | \"double_success\"\n    | \"lower_repair_difficulty\"\n    | \"custom\";\n  value?: number;\n}\n\nexport interface Charm {\n  id: string;\n  name:string;\n  cost?: string;\n  description: string;\n  minCraft: number;\n  minEssence: number;\n  effect: CharmEffect;\n  category?: 'functional' | 'narrative';\n  subEffects?: Charm[];\n}\n\nexport type DieModification = 'reroll' | 'explosion' | 'conversion' | 'fmd_source';\n\nexport interface DieResult {\n    value: number;\n    initialValue?: number;\n    modification?: DieModification;\n    modificationSource?: string;\n    usedForFMD?: boolean;\n    isModified?: boolean; // Flag to show a die has been processed in a chain reaction\n    fmdId?: number;\n}\n\nexport interface DiceRoll {\n  diceHistories: DieResult[][];\n  totalSuccesses: number;\n  automaticSuccesses: number;\n  excellencyDice: number;\n  targetNumber: number;\n  activeCharmNames: string[];\n  activeCharmIds: string[];\n  sxpFromCharm: number;\n  bonusDiceFromCharm: number;\n}\n\nexport interface CraftingOutcome {\n  isSuccess: boolean;\n  outcomeTitle: string;\n  outcomeDescription: string;\n  experienceGained: CraftingExperience;\n}\n",
  "src/lib/utils.ts": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
}